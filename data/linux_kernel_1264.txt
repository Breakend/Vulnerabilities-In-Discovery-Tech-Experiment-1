From: David Stevens <stevensd@xxxxxxxxxxxx><br>
<br>
This reverts commit 86bbd89d5da66fe760049ad3f04adc407ec0c4d6.<br>
<br>
Using the singleton stub fence in drm_syncobj_assign_null_handle means<br>
that all syncobjs created in an already signaled state or any syncobjs<br>
signaled by userspace will reference the singleton fence when exported<br>
to a sync_file. If those sync_files are queried with SYNC_IOC_FILE_INFO,<br>
then the timestamp_ns value returned will correspond to whenever the<br>
singleton stub fence was first initialized. This can break the ability<br>
of userspace to use timestamps of these fences, as the singleton stub<br>
fence's timestamp bears no relationship to any meaningful event.<br>
<br>
Signed-off-by: David Stevens <stevensd@xxxxxxxxxxxx><br>
---<br>
 drivers/gpu/drm/drm_syncobj.c | 58 ++++++++++++++++++++++++++---------<br>
 1 file changed, 44 insertions(+), 14 deletions(-)<br>
<br>
diff --git a/drivers/gpu/drm/drm_syncobj.c b/drivers/gpu/drm/drm_syncobj.c<br>
index 349146049849..7cc11f1a83f4 100644<br>
--- a/drivers/gpu/drm/drm_syncobj.c<br>
+++ b/drivers/gpu/drm/drm_syncobj.c<br>
@@ -211,6 +211,21 @@ struct syncobj_wait_entry {<br>
 static void syncobj_wait_syncobj_func(struct drm_syncobj *syncobj,<br>
 				      struct syncobj_wait_entry *wait);<br>
 <br>
+struct drm_syncobj_stub_fence {<br>
+	struct dma_fence base;<br>
+	spinlock_t lock;<br>
+};<br>
+<br>
+static const char *drm_syncobj_stub_fence_get_name(struct dma_fence *fence)<br>
+{<br>
+	return "syncobjstub";<br>
+}<br>
+<br>
+static const struct dma_fence_ops drm_syncobj_stub_fence_ops = {<br>
+	.get_driver_name = drm_syncobj_stub_fence_get_name,<br>
+	.get_timeline_name = drm_syncobj_stub_fence_get_name,<br>
+};<br>
+<br>
 /**<br>
  * drm_syncobj_find - lookup and reference a sync object.<br>
  * @file_private: drm file private pointer<br>
@@ -344,18 +359,24 @@ void drm_syncobj_replace_fence(struct drm_syncobj *syncobj,<br>
 }<br>
 EXPORT_SYMBOL(drm_syncobj_replace_fence);<br>
 <br>
-/**<br>
- * drm_syncobj_assign_null_handle - assign a stub fence to the sync object<br>
- * @syncobj: sync object to assign the fence on<br>
- *<br>
- * Assign a already signaled stub fence to the sync object.<br>
- */<br>
-static void drm_syncobj_assign_null_handle(struct drm_syncobj *syncobj)<br>
+static int drm_syncobj_assign_null_handle(struct drm_syncobj *syncobj)<br>
 {<br>
-	struct dma_fence *fence = dma_fence_get_stub();<br>
+	struct drm_syncobj_stub_fence *fence;<br>
 <br>
-	drm_syncobj_replace_fence(syncobj, fence);<br>
-	dma_fence_put(fence);<br>
+	fence = kzalloc(sizeof(*fence), GFP_KERNEL);<br>
+	if (fence == NULL)<br>
+		return -ENOMEM;<br>
+<br>
+	spin_lock_init(&fence->lock);<br>
+	dma_fence_init(&fence->base, &drm_syncobj_stub_fence_ops,<br>
+		       &fence->lock, 0, 0);<br>
+	dma_fence_signal(&fence->base);<br>
+<br>
+	drm_syncobj_replace_fence(syncobj, &fence->base);<br>
+<br>
+	dma_fence_put(&fence->base);<br>
+<br>
+	return 0;<br>
 }<br>
 <br>
 /* 5s default for wait submission */<br>
@@ -469,6 +490,7 @@ EXPORT_SYMBOL(drm_syncobj_free);<br>
 int drm_syncobj_create(struct drm_syncobj **out_syncobj, uint32_t flags,<br>
 		       struct dma_fence *fence)<br>
 {<br>
+	int ret;<br>
 	struct drm_syncobj *syncobj;<br>
 <br>
 	syncobj = kzalloc(sizeof(struct drm_syncobj), GFP_KERNEL);<br>
@@ -479,8 +501,13 @@ int drm_syncobj_create(struct drm_syncobj **out_syncobj, uint32_t flags,<br>
 	INIT_LIST_HEAD(&syncobj->cb_list);<br>
 	spin_lock_init(&syncobj->lock);<br>
 <br>
-	if (flags & DRM_SYNCOBJ_CREATE_SIGNALED)<br>
-		drm_syncobj_assign_null_handle(syncobj);<br>
+	if (flags & DRM_SYNCOBJ_CREATE_SIGNALED) {<br>
+		ret = drm_syncobj_assign_null_handle(syncobj);<br>
+		if (ret < 0) {<br>
+			drm_syncobj_put(syncobj);<br>
+			return ret;<br>
+		}<br>
+	}<br>
 <br>
 	if (fence)<br>
 		drm_syncobj_replace_fence(syncobj, fence);<br>
@@ -1322,8 +1349,11 @@ drm_syncobj_signal_ioctl(struct drm_device *dev, void *data,<br>
 	if (ret < 0)<br>
 		return ret;<br>
 <br>
-	for (i = 0; i < args->count_handles; i++)<br>
-		drm_syncobj_assign_null_handle(syncobjs[i]);<br>
+	for (i = 0; i < args->count_handles; i++) {<br>
+		ret = drm_syncobj_assign_null_handle(syncobjs[i]);<br>
+		if (ret < 0)<br>
+			break;<br>
+	}<br>
 <br>
 	drm_syncobj_array_free(syncobjs, args->count_handles);<br>
 <br>
-- <br>
2.31.0.208.g409f899ff0-goog<br>
<br>
<br>


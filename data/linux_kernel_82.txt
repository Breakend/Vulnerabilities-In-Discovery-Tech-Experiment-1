Hi Linus,<br>
<br>
please pull a couple of s390 fixes for 5.12-rc7.<br>
<br>
Thank you,<br>
Heiko<br>
<br>
The following changes since commit 84d572e634e28827d105746c922d8ada425e2d8b:<br>
<br>
  MAINTAINERS: add backups for s390 vfio drivers (2021-03-28 20:20:33 +0200)<br>
<br>
are available in the Git repository at:<br>
<br>
  git://git.kernel.org/pub/scm/linux/kernel/git/s390/linux.git tags/s390-5.12-6<br>
<br>
for you to fetch changes up to ad31a8c05196a3dc5283b193e9c74a72022d3c65:<br>
<br>
  s390/setup: use memblock_free_late() to free old stack (2021-04-07 14:37:28 +0200)<br>
<br>
----------------------------------------------------------------<br>
s390 updates for 5.12-rc7<br>
<br>
- fix incorrect dereference of the ext_params2 external interrupt parameter,<br>
  which leads to an instant kernel crash if a pfault interrupt occurs.<br>
<br>
- add forgotten stack unwinder support, and fix memory leak for the new<br>
  machine check handler stack.<br>
<br>
- fix inline assembly register clobbering due to KASAN code instrumentation.<br>
<br>
----------------------------------------------------------------<br>
Alexander Gordeev (1):<br>
      s390/cpcmd: fix inline assembly register clobbering<br>
<br>
Heiko Carstens (2):<br>
      s390/irq: fix reading of ext_params2 field from lowcore<br>
      s390/setup: use memblock_free_late() to free old stack<br>
<br>
Vasily Gorbik (1):<br>
      s390/unwind: add machine check handler stack<br>
<br>
 arch/s390/include/asm/stacktrace.h |  1 +<br>
 arch/s390/kernel/cpcmd.c           |  6 ++++--<br>
 arch/s390/kernel/dumpstack.c       | 12 +++++++++++-<br>
 arch/s390/kernel/irq.c             |  2 +-<br>
 arch/s390/kernel/setup.c           |  2 +-<br>
 5 files changed, 18 insertions(+), 5 deletions(-)<br>
<br>
diff --git a/arch/s390/include/asm/stacktrace.h b/arch/s390/include/asm/stacktrace.h<br>
index ee056f4a4fa3..2b543163d90a 100644<br>
--- a/arch/s390/include/asm/stacktrace.h<br>
+++ b/arch/s390/include/asm/stacktrace.h<br>
@@ -12,6 +12,7 @@ enum stack_type {<br>
 	STACK_TYPE_IRQ,<br>
 	STACK_TYPE_NODAT,<br>
 	STACK_TYPE_RESTART,<br>
+	STACK_TYPE_MCCK,<br>
 };<br>
 <br>
 struct stack_info {<br>
diff --git a/arch/s390/kernel/cpcmd.c b/arch/s390/kernel/cpcmd.c<br>
index af013b4244d3..2da027359798 100644<br>
--- a/arch/s390/kernel/cpcmd.c<br>
+++ b/arch/s390/kernel/cpcmd.c<br>
@@ -37,10 +37,12 @@ static int diag8_noresponse(int cmdlen)<br>
 <br>
 static int diag8_response(int cmdlen, char *response, int *rlen)<br>
 {<br>
+	unsigned long _cmdlen = cmdlen | 0x40000000L;<br>
+	unsigned long _rlen = *rlen;<br>
 	register unsigned long reg2 asm ("2") = (addr_t) cpcmd_buf;<br>
 	register unsigned long reg3 asm ("3") = (addr_t) response;<br>
-	register unsigned long reg4 asm ("4") = cmdlen | 0x40000000L;<br>
-	register unsigned long reg5 asm ("5") = *rlen;<br>
+	register unsigned long reg4 asm ("4") = _cmdlen;<br>
+	register unsigned long reg5 asm ("5") = _rlen;<br>
 <br>
 	asm volatile(<br>
 		"	diag	%2,%0,0x8\n"<br>
diff --git a/arch/s390/kernel/dumpstack.c b/arch/s390/kernel/dumpstack.c<br>
index 0dc4b258b98d..db1bc00229ca 100644<br>
--- a/arch/s390/kernel/dumpstack.c<br>
+++ b/arch/s390/kernel/dumpstack.c<br>
@@ -79,6 +79,15 @@ static bool in_nodat_stack(unsigned long sp, struct stack_info *info)<br>
 	return in_stack(sp, info, STACK_TYPE_NODAT, top - THREAD_SIZE, top);<br>
 }<br>
 <br>
+static bool in_mcck_stack(unsigned long sp, struct stack_info *info)<br>
+{<br>
+	unsigned long frame_size, top;<br>
+<br>
+	frame_size = STACK_FRAME_OVERHEAD + sizeof(struct pt_regs);<br>
+	top = S390_lowcore.mcck_stack + frame_size;<br>
+	return in_stack(sp, info, STACK_TYPE_MCCK, top - THREAD_SIZE, top);<br>
+}<br>
+<br>
 static bool in_restart_stack(unsigned long sp, struct stack_info *info)<br>
 {<br>
 	unsigned long frame_size, top;<br>
@@ -108,7 +117,8 @@ int get_stack_info(unsigned long sp, struct task_struct *task,<br>
 	/* Check per-cpu stacks */<br>
 	if (!in_irq_stack(sp, info) &&<br>
 	    !in_nodat_stack(sp, info) &&<br>
-	    !in_restart_stack(sp, info))<br>
+	    !in_restart_stack(sp, info) &&<br>
+	    !in_mcck_stack(sp, info))<br>
 		goto unknown;<br>
 <br>
 recursion_check:<br>
diff --git a/arch/s390/kernel/irq.c b/arch/s390/kernel/irq.c<br>
index 601c21791338..714269e10eec 100644<br>
--- a/arch/s390/kernel/irq.c<br>
+++ b/arch/s390/kernel/irq.c<br>
@@ -174,7 +174,7 @@ void noinstr do_ext_irq(struct pt_regs *regs)<br>
 <br>
 	memcpy(&regs->int_code, &S390_lowcore.ext_cpu_addr, 4);<br>
 	regs->int_parm = S390_lowcore.ext_params;<br>
-	regs->int_parm_long = *(unsigned long *)S390_lowcore.ext_params2;<br>
+	regs->int_parm_long = S390_lowcore.ext_params2;<br>
 <br>
 	from_idle = !user_mode(regs) && regs->psw.addr == (unsigned long)psw_idle_exit;<br>
 	if (from_idle)<br>
diff --git a/arch/s390/kernel/setup.c b/arch/s390/kernel/setup.c<br>
index 60da976eee6f..72134f9f6ff5 100644<br>
--- a/arch/s390/kernel/setup.c<br>
+++ b/arch/s390/kernel/setup.c<br>
@@ -354,7 +354,7 @@ static int __init stack_realloc(void)<br>
 	if (!new)<br>
 		panic("Couldn't allocate machine check stack");<br>
 	WRITE_ONCE(S390_lowcore.mcck_stack, new + STACK_INIT_OFFSET);<br>
-	memblock_free(old, THREAD_SIZE);<br>
+	memblock_free_late(old, THREAD_SIZE);<br>
 	return 0;<br>
 }<br>
 early_initcall(stack_realloc);<br>
<br>
<br>


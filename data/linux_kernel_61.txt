With CONFIG_CFI_CLANG, the compiler replaces function addresses<br>
in instrumented C code with jump table addresses. This means that<br>
__pa_symbol(function) returns the physical address of the jump table<br>
entry instead of the actual function, which may not work as the jump<br>
table code will immediately jump to a virtual address that may not be<br>
mapped.<br>
<br>
To avoid this address space confusion, this change adds a generic<br>
definition for function_nocfi(), which architectures that support CFI<br>
can override. The typical implementation of would use inline assembly<br>
to take the function address, which avoids compiler instrumentation.<br>
<br>
Signed-off-by: Sami Tolvanen <samitolvanen@xxxxxxxxxx><br>
Reviewed-by: Kees Cook <keescook@xxxxxxxxxxxx><br>
Acked-by: Mark Rutland <mark.rutland@xxxxxxx><br>
Tested-by: Nathan Chancellor <nathan@xxxxxxxxxx><br>
---<br>
 include/linux/mm.h | 10 ++++++++++<br>
 1 file changed, 10 insertions(+)<br>
<br>
diff --git a/include/linux/mm.h b/include/linux/mm.h<br>
index 8ba434287387..22cce9c7dd05 100644<br>
--- a/include/linux/mm.h<br>
+++ b/include/linux/mm.h<br>
@@ -124,6 +124,16 @@ extern int mmap_rnd_compat_bits __read_mostly;<br>
 #define lm_alias(x)	__va(__pa_symbol(x))<br>
 #endif<br>
 <br>
+/*<br>
+ * With CONFIG_CFI_CLANG, the compiler replaces function addresses in<br>
+ * instrumented C code with jump table addresses. Architectures that<br>
+ * support CFI can define this macro to return the actual function address<br>
+ * when needed.<br>
+ */<br>
+#ifndef function_nocfi<br>
+#define function_nocfi(x) (x)<br>
+#endif<br>
+<br>
 /*<br>
  * To prevent common memory management code establishing<br>
  * a zero page mapping on a read fault.<br>
-- <br>
2.31.1.295.g9ea45b61b8-goog<br>
<br>
<br>


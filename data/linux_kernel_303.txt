On Thu, 2021-04-08 at 11:24 -0400, Olga Kornievskaia wrote:<br>
><i> On Thu, Apr 8, 2021 at 11:01 AM Trond Myklebust <</i><br>
><i> trondmy@xxxxxxxxxxxxxxx> wrote:</i><br>
><i> > </i><br>
><i> > On Tue, 2021-04-06 at 19:16 -0500, Aditya Pakki wrote:</i><br>
><i> > > In gss_pipe_destroy_msg(), in case of error in msg,</i><br>
><i> > > gss_release_msg</i><br>
><i> > > deletes gss_msg. The patch adds a check to avoid a potential</i><br>
><i> > > double</i><br>
><i> > > free.</i><br>
><i> > > </i><br>
><i> > > Signed-off-by: Aditya Pakki <pakki001@xxxxxxx></i><br>
><i> > > ---</i><br>
><i> > >  net/sunrpc/auth_gss/auth_gss.c | 3 ++-</i><br>
><i> > >  1 file changed, 2 insertions(+), 1 deletion(-)</i><br>
><i> > > </i><br>
><i> > > diff --git a/net/sunrpc/auth_gss/auth_gss.c</i><br>
><i> > > b/net/sunrpc/auth_gss/auth_gss.c</i><br>
><i> > > index 5f42aa5fc612..eb52eebb3923 100644</i><br>
><i> > > --- a/net/sunrpc/auth_gss/auth_gss.c</i><br>
><i> > > +++ b/net/sunrpc/auth_gss/auth_gss.c</i><br>
><i> > > @@ -848,7 +848,8 @@ gss_pipe_destroy_msg(struct rpc_pipe_msg</i><br>
><i> > > *msg)</i><br>
><i> > >                         warn_gssd();</i><br>
><i> > >                 gss_release_msg(gss_msg);</i><br>
><i> > >         }</i><br>
><i> > > -       gss_release_msg(gss_msg);</i><br>
><i> > > +       if (gss_msg)</i><br>
><i> > > +               gss_release_msg(gss_msg);</i><br>
><i> > >  }</i><br>
><i> > > </i><br>
><i> > >  static void gss_pipe_dentry_destroy(struct dentry *dir,</i><br>
><i> > </i><br>
><i> > </i><br>
><i> > NACK. There's no double free there.</i><br>
><i> </i><br>
><i> I disagree that there is no double free, the wording of the commit</i><br>
><i> describes the problem in the error case is that we call</i><br>
><i> gss_release_msg() and then we call it again but the 1st one released</i><br>
><i> the gss_msg. However, I think the fix should probably be instead:</i><br>
><i> diff --git a/net/sunrpc/auth_gss/auth_gss.c</i><br>
><i> b/net/sunrpc/auth_gss/auth_gss.c</i><br>
><i> index 5f42aa5fc612..e8aae617e981 100644</i><br>
><i> --- a/net/sunrpc/auth_gss/auth_gss.c</i><br>
><i> +++ b/net/sunrpc/auth_gss/auth_gss.c</i><br>
><i> @@ -846,7 +846,7 @@ gss_pipe_destroy_msg(struct rpc_pipe_msg *msg)</i><br>
><i>                 gss_unhash_msg(gss_msg);</i><br>
><i>                 if (msg->errno == -ETIMEDOUT)</i><br>
><i>                         warn_gssd();</i><br>
><i> -               gss_release_msg(gss_msg);</i><br>
><i> +               return gss_release_msg(gss_msg);</i><br>
><i>         }</i><br>
><i>         gss_release_msg(gss_msg);</i><br>
><i>  }</i><br>
><i> </i><br>
Please look one line further up: there is a refcount_inc() that matches<br>
that first gss_release_msg(). Removing that call results in a<br>
reintroduction of the leak that Neil fixed in commit 1cded9d2974fe<br>
("SUNRPC: fix refcounting problems with auth_gss messages.").<br>
<br>
We might, however, instead opt to remove both the refcount_inc() and<br>
matching gss_release_msg(). Those do seem to be redundant, given that<br>
the caller also holds a refcount.<br>
<br>
><i> > </i><br>
><i> > --</i><br>
><i> > Trond Myklebust</i><br>
><i> > Linux NFS client maintainer, Hammerspace</i><br>
><i> > trond.myklebust@xxxxxxxxxxxxxxx</i><br>
><i> > </i><br>
><i> > </i><br>
<br>
-- <br>
Trond Myklebust<br>
Linux NFS client maintainer, Hammerspace<br>
trond.myklebust@xxxxxxxxxxxxxxx<br>
<br>
<br>


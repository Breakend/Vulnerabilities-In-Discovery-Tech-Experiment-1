From: Vladimir Olovyannikov <vladimir.olovyannikov@xxxxxxxxxxxx><br>
<br>
In certain rare combination of operations, Micron eMMC v5.0 cards<br>
may experience data errors if internal cache is enabled.<br>
This may lead to eMMC related data errors.<br>
Introduce a quirk to disable cache on these eMMC cards.<br>
<br>
Signed-off-by: Vladimir Olovyannikov <vladimir.olovyannikov@xxxxxxxxxxxx><br>
Signed-off-by: Scott Branden <scott.branden@xxxxxxxxxxxx><br>
---<br>
 drivers/mmc/core/card.h   | 5 +++++<br>
 drivers/mmc/core/mmc.c    | 4 ++--<br>
 drivers/mmc/core/quirks.h | 8 ++++++++<br>
 include/linux/mmc/card.h  | 1 +<br>
 4 files changed, 16 insertions(+), 2 deletions(-)<br>
<br>
diff --git a/drivers/mmc/core/card.h b/drivers/mmc/core/card.h<br>
index 7bd392d55cfa..22cea63ac359 100644<br>
--- a/drivers/mmc/core/card.h<br>
+++ b/drivers/mmc/core/card.h<br>
@@ -222,4 +222,9 @@ static inline int mmc_card_broken_hpi(const struct mmc_card *c)<br>
 	return c->quirks & MMC_QUIRK_BROKEN_HPI;<br>
 }<br>
 <br>
+static inline int mmc_card_broken_cache(const struct mmc_card *c)<br>
+{<br>
+	return c->quirks & MMC_QUIRK_BROKEN_CACHE;<br>
+}<br>
+<br>
 #endif<br>
diff --git a/drivers/mmc/core/mmc.c b/drivers/mmc/core/mmc.c<br>
index 8741271d3971..cd83b7f0e59c 100644<br>
--- a/drivers/mmc/core/mmc.c<br>
+++ b/drivers/mmc/core/mmc.c<br>
@@ -1820,12 +1820,12 @@ static int mmc_init_card(struct mmc_host *host, u32 ocr,<br>
 	 * sudden power failure tests. Let's extend the timeout to a minimum of<br>
 	 * DEFAULT_CACHE_EN_TIMEOUT_MS and do it for all cards.<br>
 	 */<br>
-	if (card->ext_csd.cache_size > 0) {<br>
+	if (!mmc_card_broken_cache(card) && card->ext_csd.cache_size > 0) {<br>
 		unsigned int timeout_ms = MIN_CACHE_EN_TIMEOUT_MS;<br>
 <br>
 		timeout_ms = max(card->ext_csd.generic_cmd6_time, timeout_ms);<br>
 		err = mmc_switch(card, EXT_CSD_CMD_SET_NORMAL,<br>
-				EXT_CSD_CACHE_CTRL, 1, timeout_ms);<br>
+				 EXT_CSD_CACHE_CTRL, 1, timeout_ms);<br>
 		if (err && err != -EBADMSG)<br>
 			goto free_card;<br>
 <br>
diff --git a/drivers/mmc/core/quirks.h b/drivers/mmc/core/quirks.h<br>
index d68e6e513a4f..23972d87c82a 100644<br>
--- a/drivers/mmc/core/quirks.h<br>
+++ b/drivers/mmc/core/quirks.h<br>
@@ -116,6 +116,14 @@ static const struct mmc_fixup __maybe_unused mmc_ext_csd_fixups[] = {<br>
 	MMC_FIXUP_EXT_CSD_REV(CID_NAME_ANY, CID_MANFID_NUMONYX,<br>
 			      0x014e, add_quirk, MMC_QUIRK_BROKEN_HPI, 6),<br>
 <br>
+	/*<br>
+	 * In certain rare combination of operations, Micron eMMC v5.0 cards<br>
+	 * may experience data errors if internal cache is enabled.<br>
+	 * Disabling cache for these cards eliminates the issue.<br>
+	 */<br>
+	MMC_FIXUP_EXT_CSD_REV(CID_NAME_ANY, CID_MANFID_MICRON,<br>
+			      0x014e, add_quirk, MMC_QUIRK_BROKEN_CACHE, 7),<br>
+<br>
 	END_FIXUP<br>
 };<br>
 <br>
diff --git a/include/linux/mmc/card.h b/include/linux/mmc/card.h<br>
index f9ad35dd6012..22f256a4e54e 100644<br>
--- a/include/linux/mmc/card.h<br>
+++ b/include/linux/mmc/card.h<br>
@@ -270,6 +270,7 @@ struct mmc_card {<br>
 #define MMC_QUIRK_BROKEN_IRQ_POLLING	(1<<11)	/* Polling SDIO_CCCR_INTx could create a fake interrupt */<br>
 #define MMC_QUIRK_TRIM_BROKEN	(1<<12)		/* Skip trim */<br>
 #define MMC_QUIRK_BROKEN_HPI	(1<<13)		/* Disable broken HPI support */<br>
+#define MMC_QUIRK_BROKEN_CACHE	(1<<14)		/* Disable broken cache */<br>
 <br>
 	bool			reenable_cmdq;	/* Re-enable Command Queue */<br>
 <br>
-- <br>
2.17.1<br>
<br>
<br>


On Sat, Mar 27, 2021 at 4:50 AM Xiaofei Tan <tanxiaofei@xxxxxxxxxx> wrote:<br>
><i></i><br>
><i> Fix some coding style issues reported by checkpatch.pl, including</i><br>
><i> following types:</i><br>
><i></i><br>
><i> ERROR: "foo * bar" should be "foo *bar"</i><br>
><i> ERROR: code indent should use tabs where possible</i><br>
><i> WARNING: Block comments use a trailing */ on a separate line</i><br>
><i> WARNING: braces {} are not necessary for single statement blocks</i><br>
><i> WARNING: void function return statements are not generally useful</i><br>
><i> WARNING: CVS style keyword markers, these will _not_ be updated</i><br>
><i></i><br>
><i> Signed-off-by: Xiaofei Tan <tanxiaofei@xxxxxxxxxx></i><br>
><i> ---</i><br>
><i>  drivers/acpi/ac.c | 28 ++++++++--------------------</i><br>
><i>  1 file changed, 8 insertions(+), 20 deletions(-)</i><br>
><i></i><br>
><i> diff --git a/drivers/acpi/ac.c b/drivers/acpi/ac.c</i><br>
><i> index b86ee6e..b0cb662 100644</i><br>
><i> --- a/drivers/acpi/ac.c</i><br>
><i> +++ b/drivers/acpi/ac.c</i><br>
><i> @@ -1,6 +1,6 @@</i><br>
><i>  // SPDX-License-Identifier: GPL-2.0-or-later</i><br>
><i>  /*</i><br>
><i> - *  acpi_ac.c - ACPI AC Adapter Driver ($Revision: 27 $)</i><br>
><i> + *  acpi_ac.c - ACPI AC Adapter Driver (Revision: 27)</i><br>
><i>   *</i><br>
><i>   *  Copyright (C) 2001, 2002 Andy Grover <andrew.grover@xxxxxxxxx></i><br>
><i>   *  Copyright (C) 2001, 2002 Paul Diefenbaugh <paul.s.diefenbaugh@xxxxxxxxx></i><br>
><i> @@ -78,17 +78,14 @@ static struct acpi_driver acpi_ac_driver = {</i><br>
><i>  struct acpi_ac {</i><br>
><i>         struct power_supply *charger;</i><br>
><i>         struct power_supply_desc charger_desc;</i><br>
><i> -       struct acpi_device * device;</i><br>
><i> +       struct acpi_device *device;</i><br>
><i>         unsigned long long state;</i><br>
><i>         struct notifier_block battery_nb;</i><br>
><i>  };</i><br>
><i></i><br>
><i>  #define to_acpi_ac(x) power_supply_get_drvdata(x)</i><br>
><i></i><br>
><i> -/* --------------------------------------------------------------------------</i><br>
><i> -                               AC Adapter Management</i><br>
><i> -   -------------------------------------------------------------------------- */</i><br>
><i> -</i><br>
><i> +/* AC Adapter Management */</i><br>
><i>  static int acpi_ac_get_state(struct acpi_ac *ac)</i><br>
><i>  {</i><br>
><i>         acpi_status status = AE_OK;</i><br>
><i> @@ -109,9 +106,7 @@ static int acpi_ac_get_state(struct acpi_ac *ac)</i><br>
><i>         return 0;</i><br>
><i>  }</i><br>
><i></i><br>
><i> -/* --------------------------------------------------------------------------</i><br>
><i> -                            sysfs I/F</i><br>
><i> -   -------------------------------------------------------------------------- */</i><br>
><i> +/* sysfs I/F */</i><br>
><i>  static int get_ac_property(struct power_supply *psy,</i><br>
><i>                            enum power_supply_property psp,</i><br>
><i>                            union power_supply_propval *val)</i><br>
><i> @@ -138,10 +133,7 @@ static enum power_supply_property ac_props[] = {</i><br>
><i>         POWER_SUPPLY_PROP_ONLINE,</i><br>
><i>  };</i><br>
><i></i><br>
><i> -/* --------------------------------------------------------------------------</i><br>
><i> -                                   Driver Model</i><br>
><i> -   -------------------------------------------------------------------------- */</i><br>
><i> -</i><br>
><i> +/* Driver Model */</i><br>
><i>  static void acpi_ac_notify(struct acpi_device *device, u32 event)</i><br>
><i>  {</i><br>
><i>         struct acpi_ac *ac = acpi_driver_data(device);</i><br>
><i> @@ -174,8 +166,6 @@ static void acpi_ac_notify(struct acpi_device *device, u32 event)</i><br>
><i>                 acpi_notifier_call_chain(device, event, (u32) ac->state);</i><br>
><i>                 kobject_uevent(&ac->charger->dev.kobj, KOBJ_CHANGE);</i><br>
><i>         }</i><br>
><i> -</i><br>
><i> -       return;</i><br>
><i>  }</i><br>
><i></i><br>
><i>  static int acpi_ac_battery_notify(struct notifier_block *nb,</i><br>
><i> @@ -282,9 +272,8 @@ static int acpi_ac_add(struct acpi_device *device)</i><br>
><i>         ac->battery_nb.notifier_call = acpi_ac_battery_notify;</i><br>
><i>         register_acpi_notifier(&ac->battery_nb);</i><br>
><i>  end:</i><br>
><i> -       if (result) {</i><br>
><i> +       if (result)</i><br>
><i>                 kfree(ac);</i><br>
><i> -       }</i><br>
><i></i><br>
><i>         return result;</i><br>
><i>  }</i><br>
><i> @@ -293,7 +282,7 @@ static int acpi_ac_add(struct acpi_device *device)</i><br>
><i>  static int acpi_ac_resume(struct device *dev)</i><br>
><i>  {</i><br>
><i>         struct acpi_ac *ac;</i><br>
><i> -       unsigned old_state;</i><br>
><i> +       unsigned int old_state;</i><br>
><i></i><br>
><i>         if (!dev)</i><br>
><i>                 return -EINVAL;</i><br>
><i> @@ -352,9 +341,8 @@ static int __init acpi_ac_init(void)</i><br>
><i>         }</i><br>
><i></i><br>
><i>         result = acpi_bus_register_driver(&acpi_ac_driver);</i><br>
><i> -       if (result < 0) {</i><br>
><i> +       if (result < 0)</i><br>
><i>                 return -ENODEV;</i><br>
><i> -       }</i><br>
><i></i><br>
><i>         return 0;</i><br>
><i>  }</i><br>
><i> --</i><br>
<br>
Applied as 5.13 material, thanks!<br>
<br>
<br>


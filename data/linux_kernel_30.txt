Shreeya Patel <shreeya.patel@xxxxxxxxxxxxx> writes:<br>
<br>
><i> utf8data.h_shipped has a large database table which is an auto-generated</i><br>
><i> decodification trie for the unicode normalization functions.</i><br>
><i> It is not necessary to load this large table in the kernel if no</i><br>
><i> filesystem is using it, hence make UTF-8 encoding loadable by converting</i><br>
><i> it into a module.</i><br>
><i></i><br>
><i> Modify the file called unicode-core which will act as a layer for</i><br>
><i> unicode subsystem. It will load the UTF-8 module and access it's functions</i><br>
><i> whenever any filesystem that needs unicode is mounted.</i><br>
><i> Currently, only UTF-8 encoding is supported but if any other encodings</i><br>
><i> are supported in future then the layer file would be responsible for</i><br>
><i> loading the desired encoding module.</i><br>
><i></i><br>
><i> Also, indirect calls using function pointers are slow, use static calls to</i><br>
><i> avoid overhead caused in case of repeated indirect calls. Static calls</i><br>
><i> improves the performance by directly calling the functions as opposed to</i><br>
><i> indirect calls.</i><br>
><i></i><br>
><i> Signed-off-by: Shreeya Patel <shreeya.patel@xxxxxxxxxxxxx></i><br>
><i> ---</i><br>
><i> Changes in v7</i><br>
><i>   - Update the help text in Kconfig</i><br>
><i>   - Handle the unicode_load_static_call function failure by decrementing</i><br>
><i>     the reference.</i><br>
><i>   - Correct the code for handling built-in utf8 option as well.</i><br>
><i>   - Correct the synchronization for accessing utf8mod.</i><br>
><i>   - Make changes to unicode_unload() for handling the situation where</i><br>
><i>     utf8mod != NULL and um == NULL.</i><br>
><i></i><br>
><i> Changes in v6</i><br>
><i>   - Add spinlock to protect utf8mod and avoid NULL pointer</i><br>
><i>     dereference.</i><br>
><i>   - Change the static call function names for being consistent with</i><br>
><i>     kernel coding style.</i><br>
><i>   - Merge the unicode_load_module function with unicode_load as it is</i><br>
><i>     not really needed to have a separate function.</i><br>
><i>   - Use try_then_module_get instead of module_get to avoid loading the</i><br>
><i>     module even when it is already loaded.</i><br>
><i>   - Improve the commit message.</i><br>
><i></i><br>
><i> Changes in v5</i><br>
><i>   - Rename global variables and default static call functions for better</i><br>
><i>     understanding</i><br>
><i>   - Make only config UNICODE_UTF8 visible and config UNICODE to be always</i><br>
><i>     enabled provided UNICODE_UTF8 is enabled.  </i><br>
><i>   - Improve the documentation for Kconfig</i><br>
><i>   - Improve the commit message.</i><br>
><i>  </i><br>
><i> Changes in v4</i><br>
><i>   - Return error from the static calls instead of doing nothing and</i><br>
><i>     succeeding even without loading the module.</i><br>
><i>   - Remove the complete usage of utf8_ops and use static calls at all</i><br>
><i>     places.</i><br>
><i>   - Restore the static calls to default values when module is unloaded.</i><br>
><i>   - Decrement the reference of module after calling the unload function.</i><br>
><i>   - Remove spinlock as there will be no race conditions after removing</i><br>
><i>     utf8_ops.</i><br>
><i></i><br>
><i> Changes in v3</i><br>
><i>   - Add a patch which checks if utf8 is loaded before calling utf8_unload()</i><br>
><i>     in ext4 and f2fs filesystems</i><br>
><i>   - Return error if strscpy() returns value < 0</i><br>
><i>   - Correct the conditions to prevent NULL pointer dereference while</i><br>
><i>     accessing functions via utf8_ops variable.</i><br>
><i>   - Add spinlock to avoid race conditions.</i><br>
><i>   - Use static_call() for preventing speculative execution attacks.</i><br>
><i></i><br>
><i> Changes in v2</i><br>
><i>   - Remove the duplicate file from the last patch.</i><br>
><i>   - Make the wrapper functions inline.</i><br>
><i>   - Remove msleep and use try_module_get() and module_put()</i><br>
><i>     for ensuring that module is loaded correctly and also</i><br>
><i>     doesn't get unloaded while in use.</i><br>
><i>   - Resolve the warning reported by kernel test robot.</i><br>
><i>   - Resolve all the checkpatch.pl warnings.</i><br>
><i></i><br>
><i>  fs/unicode/Kconfig        |  26 +++-</i><br>
><i>  fs/unicode/Makefile       |   5 +-</i><br>
><i>  fs/unicode/unicode-core.c | 297 ++++++++++++++------------------------</i><br>
><i>  fs/unicode/unicode-utf8.c | 264 +++++++++++++++++++++++++++++++++</i><br>
><i>  include/linux/unicode.h   |  96 ++++++++++--</i><br>
><i>  5 files changed, 483 insertions(+), 205 deletions(-)</i><br>
><i>  create mode 100644 fs/unicode/unicode-utf8.c</i><br>
><i></i><br>
><i> diff --git a/fs/unicode/Kconfig b/fs/unicode/Kconfig</i><br>
><i> index 2c27b9a5cd6c..0c69800a2a37 100644</i><br>
><i> --- a/fs/unicode/Kconfig</i><br>
><i> +++ b/fs/unicode/Kconfig</i><br>
><i> @@ -2,13 +2,31 @@</i><br>
><i>  #</i><br>
><i>  # UTF-8 normalization</i><br>
><i>  #</i><br>
><i> +# CONFIG_UNICODE will be automatically enabled if CONFIG_UNICODE_UTF8</i><br>
><i> +# is enabled. This config option adds the unicode subsystem layer which loads</i><br>
><i> +# the UTF-8 module whenever any filesystem needs it.</i><br>
><i>  config UNICODE</i><br>
><i> -	bool "UTF-8 normalization and casefolding support"</i><br>
><i> +	bool</i><br>
><i> +</i><br>
><i> +config UNICODE_UTF8</i><br>
><i> +	tristate "UTF-8 module"</i><br>
<br>
"UTF-8 module" is the text that will appear in menuconfig and other<br>
configuration utilities.  This string not very helpful to describe what<br>
this code is about or why it is different from NLS_utf8.  People come to<br>
this option looking for the case-insensitive feature in ext4, so I'd<br>
prefer to keep the mention to 'casefolding'. or even improve the<br>
original a bit to say:<br>
<br>
tristate: "UTF-8 support for native Case-Insensitive filesystems"<br>
<br>
Other than these and what Eric mentioned, the code looks good to me.  I<br>
gave this series a try and it seems to work fine.<br>
<br>
It does raise a new warning, though<br>
<br>
/home/krisman/src/linux/fs/unicode/unicode-core.c: In function ‘unicode_load’:<br>
/home/krisman/src/linux/include/linux/kmod.h:28:8: warning: the omitted middle operand in ‘?:’ will always be ‘true’, suggest explicit middle operand [-Wparentheses]<br>
   28 |  ((x) ?: (__request_module(true, mod), (x)))<br>
      |        ^<br>
/home/krisman/src/linux/fs/unicode/unicode-core.c:123:7: note: in expansion of macro ‘try_then_request_module’<br>
  123 |  if (!try_then_request_module(utf8mod_get(), "utf8")) {<br>
<br>
But in this specific case, i think gcc is just being silly. What would<br>
be the right way to avoid it?<br>
<br>
-- <br>
Gabriel Krisman Bertazi<br>
<br>
<br>



Hi,<br>
<blockquote style="border-left: #5555EE solid 0.2em; margin: 0em; padding-left: 0.85em">
Hi<br>
<br>
On Wed, Apr 7, 2021 at 10:11 PM Pierre <pierre.gondois@xxxxxxx> wrote:<br>
><br>
> Hi,<br>
> > I test the patch, but the overflow still exists.<br>
> > In the "sched/fair: Use pd_cache to speed up 
find_energy_efficient_cpu()"
<br>> > I wonder why recompute the cpu util when cpu==dst_cpu in 
compute_energy(),
<br>
> > when the dst_cpu's util change, it also would cause the overflow.<br>
><br>
> The patches aim to cache the energy values for the CPUs whose<br>
> utilization is not modified (so we don't have to compute it multiple<br>
> times). The values cached are the 'base values' of the CPUs, i.e. when<br>
> the task is not placed on the CPU. When (cpu==dst_cpu) in<br>
> compute_energy(), it means the energy values need to be updated instead<br>
> of using the cached ones.<br>
><br>
well, is it better to use the task_util(p) + cache values ? but in<br>
this case, the cache<br>
values may need more parameters.<br>
</blockquote>
<br>
This patch-set is not significantly improving the execution time of 
feec(). The results we have so far are an improvement of 5-10% in 
execution time, with feec() being executed in < 10us. So the gain is not 
spectacular.
<br>
<br>
<blockquote style="border-left: #5555EE solid 0.2em; margin: 0em; padding-left: 0.85em">
<br>
> You are right, there is still a possibility to have a negative delta<br>
> with the patches at:<br>
> 
<a  rel="nofollow" href="https://gitlab.arm.com/linux-arm/linux-power/-/commits/eas/next/integration-20210129">https://gitlab.arm.com/linux-arm/linux-power/-/commits/eas/next/integration-20210129</a> 
<<a  rel="nofollow" href="https://gitlab.arm.com/linux-arm/linux-power/-/commits/eas/next/integration-20210129">https://gitlab.arm.com/linux-arm/linux-power/-/commits/eas/next/integration-20210129</a>>
<br>
> Adding a check before subtracting the values, and bailing out in such<br>
> case would avoid this, such as at:<br>
> <a  rel="nofollow" href="https://gitlab.arm.com/linux-arm/linux-pg/-/commits/feec_bail_out/">https://gitlab.arm.com/linux-arm/linux-pg/-/commits/feec_bail_out/</a> 
<<a  rel="nofollow" href="https://gitlab.arm.com/linux-arm/linux-pg/-/commits/feec_bail_out/">https://gitlab.arm.com/linux-arm/linux-pg/-/commits/feec_bail_out/</a>>
<br>
><br>
In your patch, you bail out the case by "go to fail", that means you<br>
don't use eas in such<br>
case. However, in the actual scene, the case often occurr when select<br>
cpu for small task.<br>
As a result, the small task would not select cpu according to the eas,<br>
it may affect<br>
power consumption?<br>
</blockquote>With this patch (bailing out), the percentage of feec() returning due to 
a negative delta I get are:
<br>on a Juno-r2, with 2 big CPUs and 4 CPUs (capacity of 383), with a 
workload running during 5s with task having a period of 16 ms and:
<br>
 - 50 tasks at 1%:   0.14%<br>
 - 30 tasks at 1%:   0.54%<br>
 - 10 tasks at 1%: < 0.1%<br>
 - 30 tasks at 5%: < 0.1%<br>
 - 10 tasks at 5%: < 0.1%<br>
It doesn't happen so often to me.If we bail out of feec(), the task will 
still have another opportunity in the next call. However I agree this 
can lead to a bad placement when this happens.
<br><blockquote style="border-left: #5555EE solid 0.2em; margin: 0em; padding-left: 0.85em">
<br>
> I think a similar modification should be done in your patch. Even though<br>
> this is a good idea to group the calls to compute_energy() to reduce the<br>
> chances of having updates of utilization values in between the<br>
> compute_energy() calls,<br>
> there is still a chance to have updates. I think it happened when I<br>
> applied your patch.<br>
><br>
> About changing the delta(s) from 'unsigned long' to 'long', I am not<br>
> sure of the meaning of having a negative delta. I thing it would be<br>
> better to check and fail before it happens instead.<br>
><br>
> Regards<br>
><br>
</blockquote>
<br>
<br>
<br>
<br>


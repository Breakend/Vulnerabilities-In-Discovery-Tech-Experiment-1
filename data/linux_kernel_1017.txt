Hi Manish,<br>
<br>
><i> During command status or command complete event, the controller may set</i><br>
><i> ncmd=0 indicating that it is not accepting any more commands. In such a</i><br>
><i> case, host holds off sending any more commands to the controller. If the</i><br>
><i> controller doesn't recover from such condition, host will wait forever,</i><br>
><i> until the user decides that the Bluetooth is broken and may power cycles</i><br>
><i> the Bluetooth.</i><br>
><i> </i><br>
><i> This patch triggers the hardware error to reset the controller and</i><br>
><i> driver when it gets into such state as there is no other wat out.</i><br>
><i> </i><br>
><i> Reviewed-by: Abhishek Pandit-Subedi <abhishekpandit@xxxxxxxxxxxx></i><br>
><i> Signed-off-by: Manish Mandlik <mmandlik@xxxxxxxxxx></i><br>
><i> ---</i><br>
><i> </i><br>
><i> Changes in v2:</i><br>
><i> - Emit the hardware error when ncmd=0 occurs</i><br>
><i> </i><br>
><i> include/net/bluetooth/hci.h      |  1 +</i><br>
><i> include/net/bluetooth/hci_core.h |  1 +</i><br>
><i> net/bluetooth/hci_core.c         | 15 +++++++++++++++</i><br>
><i> net/bluetooth/hci_event.c        | 10 ++++++++++</i><br>
><i> 4 files changed, 27 insertions(+)</i><br>
><i> </i><br>
><i> diff --git a/include/net/bluetooth/hci.h b/include/net/bluetooth/hci.h</i><br>
><i> index ea4ae551c426..c4b0650fb9ae 100644</i><br>
><i> --- a/include/net/bluetooth/hci.h</i><br>
><i> +++ b/include/net/bluetooth/hci.h</i><br>
><i> @@ -339,6 +339,7 @@ enum {</i><br>
><i> #define HCI_PAIRING_TIMEOUT	msecs_to_jiffies(60000)	/* 60 seconds */</i><br>
><i> #define HCI_INIT_TIMEOUT	msecs_to_jiffies(10000)	/* 10 seconds */</i><br>
><i> #define HCI_CMD_TIMEOUT		msecs_to_jiffies(2000)	/* 2 seconds */</i><br>
><i> +#define HCI_NCMD_TIMEOUT	msecs_to_jiffies(4000)	/* 4 seconds */</i><br>
><i> #define HCI_ACL_TX_TIMEOUT	msecs_to_jiffies(45000)	/* 45 seconds */</i><br>
><i> #define HCI_AUTO_OFF_TIMEOUT	msecs_to_jiffies(2000)	/* 2 seconds */</i><br>
><i> #define HCI_POWER_OFF_TIMEOUT	msecs_to_jiffies(5000)	/* 5 seconds */</i><br>
><i> diff --git a/include/net/bluetooth/hci_core.h b/include/net/bluetooth/hci_core.h</i><br>
><i> index ebdd4afe30d2..f14692b39fd5 100644</i><br>
><i> --- a/include/net/bluetooth/hci_core.h</i><br>
><i> +++ b/include/net/bluetooth/hci_core.h</i><br>
><i> @@ -470,6 +470,7 @@ struct hci_dev {</i><br>
><i> 	struct delayed_work	service_cache;</i><br>
><i> </i><br>
><i> 	struct delayed_work	cmd_timer;</i><br>
><i> +	struct delayed_work	ncmd_timer;</i><br>
><i> </i><br>
><i> 	struct work_struct	rx_work;</i><br>
><i> 	struct work_struct	cmd_work;</i><br>
><i> diff --git a/net/bluetooth/hci_core.c b/net/bluetooth/hci_core.c</i><br>
><i> index b0d9c36acc03..c102a8763cb5 100644</i><br>
><i> --- a/net/bluetooth/hci_core.c</i><br>
><i> +++ b/net/bluetooth/hci_core.c</i><br>
><i> @@ -2769,6 +2769,20 @@ static void hci_cmd_timeout(struct work_struct *work)</i><br>
><i> 	queue_work(hdev->workqueue, &hdev->cmd_work);</i><br>
><i> }</i><br>
><i> </i><br>
><i> +/* HCI ncmd timer function */</i><br>
><i> +static void hci_ncmd_timeout(struct work_struct *work)</i><br>
><i> +{</i><br>
><i> +	struct hci_dev *hdev = container_of(work, struct hci_dev,</i><br>
><i> +					    ncmd_timer.work);</i><br>
><i> +</i><br>
><i> +	bt_dev_err(hdev, "Controller not accepting commands anymore: ncmd = 0");</i><br>
><i> +</i><br>
><i> +	/* This is an irrecoverable state. Inject hw error event to reset</i><br>
><i> +	 * the device and driver.</i><br>
><i> +	 */</i><br>
><i> +	hci_reset_dev(hdev);</i><br>
<br>
	/* This is an irrecoverable state, inject hardware error event */<br>
	hci_reset_dev(hdev);<br>
<br>
Since you will not be resetting the driver here. You just tell the core stack to reset itself and with HCI_Reset hopefully bring the hardware back to life. Or if the ncmd=0 is a hardware bug, just start sending a new command.<br>
<br>
><i> +}</i><br>
><i> +</i><br>
><i> struct oob_data *hci_find_remote_oob_data(struct hci_dev *hdev,</i><br>
><i> 					  bdaddr_t *bdaddr, u8 bdaddr_type)</i><br>
><i> {</i><br>
><i> @@ -3831,6 +3845,7 @@ struct hci_dev *hci_alloc_dev(void)</i><br>
><i> 	init_waitqueue_head(&hdev->suspend_wait_q);</i><br>
><i> </i><br>
><i> 	INIT_DELAYED_WORK(&hdev->cmd_timer, hci_cmd_timeout);</i><br>
><i> +	INIT_DELAYED_WORK(&hdev->ncmd_timer, hci_ncmd_timeout);</i><br>
><i> </i><br>
><i> 	hci_request_setup(hdev);</i><br>
><i> </i><br>
><i> diff --git a/net/bluetooth/hci_event.c b/net/bluetooth/hci_event.c</i><br>
><i> index cf2f4a0abdbd..114a9170d809 100644</i><br>
><i> --- a/net/bluetooth/hci_event.c</i><br>
><i> +++ b/net/bluetooth/hci_event.c</i><br>
><i> @@ -3635,6 +3635,11 @@ static void hci_cmd_complete_evt(struct hci_dev *hdev, struct sk_buff *skb,</i><br>
><i> 	if (*opcode != HCI_OP_NOP)</i><br>
><i> 		cancel_delayed_work(&hdev->cmd_timer);</i><br>
><i> </i><br>
><i> +	if (!ev->ncmd &&!test_bit(HCI_RESET, &hdev->flags))</i><br>
><i> +		schedule_delayed_work(&hdev->ncmd_timer, HCI_NCMD_TIMEOUT);</i><br>
><i> +	else</i><br>
><i> +		cancel_delayed_work(&hdev->ncmd_timer);</i><br>
><i> +</i><br>
><i> 	if (ev->ncmd && !test_bit(HCI_RESET, &hdev->flags))</i><br>
><i> 		atomic_set(&hdev->cmd_cnt, 1);</i><br>
><i> </i><br>
<br>
	if (!test_bit(HCI_RESET, &hdev->flags)) {<br>
		if (ev->ncmd) {<br>
			cancel_delayed_work(&hdev->ncmd_timer);<br>
			atomic_set(&hdev->cmd_cnt, 1);<br>
		} else {<br>
			schedule_delayed_work(&hdev->ncmd_timer,<br>
					      HCI_NCMD_TIMEOUT);<br>
		}<br>
	}<br>
<br>
I think doing it this way is a bit cleaner and avoid the check of !ncmd and !HCI_RESET twice.<br>
<br>
And I wonder if there isn’t a cancel_delayed_work missing in hci_dev_do_close or some related location when we are shutting down.<br>
<br>
What do we do when this happens during HCI_INIT. I think if ncmd_timer triggers during HCI_INIT, then hci_up needs to be aborted and no hardware error event to be injected.<br>
<br>
In addition since you are now calling hci_reset_dev also from the core stack (perviously, it was just up to the drivers to do that), I would add an extra error.<br>
<br>
diff --git a/net/bluetooth/hci_core.c b/net/bluetooth/hci_core.c<br>
index fd12f1652bdf..1c9ef5608930 100644<br>
--- a/net/bluetooth/hci_core.c<br>
+++ b/net/bluetooth/hci_core.c<br>
@@ -4073,6 +4073,8 @@ int hci_reset_dev(struct hci_dev *hdev)<br>
        hci_skb_pkt_type(skb) = HCI_EVENT_PKT;<br>
        skb_put_data(skb, hw_err, 3);<br>
 <br>
+       bt_dev_err(hdev, "Injecting HCI hardware error event");<br>
+<br>
        /* Send Hardware Error to upper stack */<br>
        return hci_recv_frame(hdev, skb);<br>
 }<br>
<br>
This has the advantage that if you take a btmon trace, you know this event is injected. Or more precisely eventually will be able to know since we haven’t merged my patches yet that will redirect bt_dev_{err,warn,..} into btmon as well.<br>
<br>
Regards<br>
<br>
Marcel<br>
<br>
<br>


This change adds support for Clang’s forward-edge Control Flow<br>
Integrity (CFI) checking. With CONFIG_CFI_CLANG, the compiler<br>
injects a runtime check before each indirect function call to ensure<br>
the target is a valid function with the correct static type. This<br>
restricts possible call targets and makes it more difficult for<br>
an attacker to exploit bugs that allow the modification of stored<br>
function pointers. For more details, see:<br>
<br>
  <a  rel="nofollow" href="https://clang.llvm.org/docs/ControlFlowIntegrity.html">https://clang.llvm.org/docs/ControlFlowIntegrity.html</a><br>
<br>
Clang requires CONFIG_LTO_CLANG to be enabled with CFI to gain<br>
visibility to possible call targets. Kernel modules are supported<br>
with Clang’s cross-DSO CFI mode, which allows checking between<br>
independently compiled components.<br>
<br>
With CFI enabled, the compiler injects a __cfi_check() function into<br>
the kernel and each module for validating local call targets. For<br>
cross-module calls that cannot be validated locally, the compiler<br>
calls the global __cfi_slowpath_diag() function, which determines<br>
the target module and calls the correct __cfi_check() function. This<br>
patch includes a slowpath implementation that uses __module_address()<br>
to resolve call targets, and with CONFIG_CFI_CLANG_SHADOW enabled, a<br>
shadow map that speeds up module look-ups by ~3x.<br>
<br>
Clang implements indirect call checking using jump tables and<br>
offers two methods of generating them. With canonical jump tables,<br>
the compiler renames each address-taken function to <function>.cfi<br>
and points the original symbol to a jump table entry, which passes<br>
__cfi_check() validation. This isn’t compatible with stand-alone<br>
assembly code, which the compiler doesn’t instrument, and would<br>
result in indirect calls to assembly code to fail. Therefore, we<br>
default to using non-canonical jump tables instead, where the compiler<br>
generates a local jump table entry <function>.cfi_jt for each<br>
address-taken function, and replaces all references to the function<br>
with the address of the jump table entry.<br>
<br>
Note that because non-canonical jump table addresses are local<br>
to each component, they break cross-module function address<br>
equality. Specifically, the address of a global function will be<br>
different in each module, as it's replaced with the address of a local<br>
jump table entry. If this address is passed to a different module,<br>
it won’t match the address of the same function taken there. This<br>
may break code that relies on comparing addresses passed from other<br>
components.<br>
<br>
CFI checking can be disabled in a function with the __nocfi attribute.<br>
Additionally, CFI can be disabled for an entire compilation unit by<br>
filtering out CC_FLAGS_CFI.<br>
<br>
By default, CFI failures result in a kernel panic to stop a potential<br>
exploit. CONFIG_CFI_PERMISSIVE enables a permissive mode, where the<br>
kernel prints out a rate-limited warning instead, and allows execution<br>
to continue. This option is helpful for locating type mismatches, but<br>
should only be enabled during development.<br>
<br>
Signed-off-by: Sami Tolvanen <samitolvanen@xxxxxxxxxx><br>
Reviewed-by: Kees Cook <keescook@xxxxxxxxxxxx><br>
Tested-by: Nathan Chancellor <nathan@xxxxxxxxxx><br>
---<br>
 Makefile                          |  17 ++<br>
 arch/Kconfig                      |  45 ++++<br>
 include/asm-generic/bug.h         |  16 ++<br>
 include/asm-generic/vmlinux.lds.h |  20 +-<br>
 include/linux/cfi.h               |  41 ++++<br>
 include/linux/compiler-clang.h    |   2 +<br>
 include/linux/compiler_types.h    |   4 +<br>
 include/linux/init.h              |   2 +-<br>
 include/linux/module.h            |  13 +-<br>
 init/Kconfig                      |   2 +-<br>
 kernel/Makefile                   |   4 +<br>
 kernel/cfi.c                      | 329 ++++++++++++++++++++++++++++++<br>
 kernel/module.c                   |  43 ++++<br>
 scripts/Makefile.modfinal         |   2 +-<br>
 14 files changed, 534 insertions(+), 6 deletions(-)<br>
 create mode 100644 include/linux/cfi.h<br>
 create mode 100644 kernel/cfi.c<br>
<br>
diff --git a/Makefile b/Makefile<br>
index cc77fd45ca64..427f75249d5e 100644<br>
--- a/Makefile<br>
+++ b/Makefile<br>
@@ -920,6 +920,23 @@ KBUILD_AFLAGS	+= -fno-lto<br>
 export CC_FLAGS_LTO<br>
 endif<br>
 <br>
+ifdef CONFIG_CFI_CLANG<br>
+CC_FLAGS_CFI	:= -fsanitize=cfi \<br>
+		   -fsanitize-cfi-cross-dso \<br>
+		   -fno-sanitize-cfi-canonical-jump-tables \<br>
+		   -fno-sanitize-trap=cfi \<br>
+		   -fno-sanitize-blacklist<br>
+<br>
+ifdef CONFIG_CFI_PERMISSIVE<br>
+CC_FLAGS_CFI	+= -fsanitize-recover=cfi<br>
+endif<br>
+<br>
+# If LTO flags are filtered out, we must also filter out CFI.<br>
+CC_FLAGS_LTO	+= $(CC_FLAGS_CFI)<br>
+KBUILD_CFLAGS	+= $(CC_FLAGS_CFI)<br>
+export CC_FLAGS_CFI<br>
+endif<br>
+<br>
 ifdef CONFIG_DEBUG_FORCE_FUNCTION_ALIGN_32B<br>
 KBUILD_CFLAGS += -falign-functions=32<br>
 endif<br>
diff --git a/arch/Kconfig b/arch/Kconfig<br>
index ecfd3520b676..f6a85ba6cba2 100644<br>
--- a/arch/Kconfig<br>
+++ b/arch/Kconfig<br>
@@ -692,6 +692,51 @@ config LTO_CLANG_THIN<br>
 	  If unsure, say Y.<br>
 endchoice<br>
 <br>
+config ARCH_SUPPORTS_CFI_CLANG<br>
+	bool<br>
+	help<br>
+	  An architecture should select this option if it can support Clang's<br>
+	  Control-Flow Integrity (CFI) checking.<br>
+<br>
+config CFI_CLANG<br>
+	bool "Use Clang's Control Flow Integrity (CFI)"<br>
+	depends on LTO_CLANG && ARCH_SUPPORTS_CFI_CLANG<br>
+	# Clang >= 12:<br>
+	# - <a  rel="nofollow" href="https://bugs.llvm.org/show_bug.cgi?id=46258">https://bugs.llvm.org/show_bug.cgi?id=46258</a><br>
+	# - <a  rel="nofollow" href="https://bugs.llvm.org/show_bug.cgi?id=47479">https://bugs.llvm.org/show_bug.cgi?id=47479</a><br>
+	depends on CLANG_VERSION >= 120000<br>
+	select KALLSYMS<br>
+	help<br>
+	  This option enables Clang’s forward-edge Control Flow Integrity<br>
+	  (CFI) checking, where the compiler injects a runtime check to each<br>
+	  indirect function call to ensure the target is a valid function with<br>
+	  the correct static type. This restricts possible call targets and<br>
+	  makes it more difficult for an attacker to exploit bugs that allow<br>
+	  the modification of stored function pointers. More information can be<br>
+	  found from Clang's documentation:<br>
+<br>
+	    <a  rel="nofollow" href="https://clang.llvm.org/docs/ControlFlowIntegrity.html">https://clang.llvm.org/docs/ControlFlowIntegrity.html</a><br>
+<br>
+config CFI_CLANG_SHADOW<br>
+	bool "Use CFI shadow to speed up cross-module checks"<br>
+	default y<br>
+	depends on CFI_CLANG && MODULES<br>
+	help<br>
+	  If you select this option, the kernel builds a fast look-up table of<br>
+	  CFI check functions in loaded modules to reduce performance overhead.<br>
+<br>
+	  If unsure, say Y.<br>
+<br>
+config CFI_PERMISSIVE<br>
+	bool "Use CFI in permissive mode"<br>
+	depends on CFI_CLANG<br>
+	help<br>
+	  When selected, Control Flow Integrity (CFI) violations result in a<br>
+	  warning instead of a kernel panic. This option should only be used<br>
+	  for finding indirect call type mismatches during development.<br>
+<br>
+	  If unsure, say N.<br>
+<br>
 config HAVE_ARCH_WITHIN_STACK_FRAMES<br>
 	bool<br>
 	help<br>
diff --git a/include/asm-generic/bug.h b/include/asm-generic/bug.h<br>
index 76a10e0dca9f..b402494883b6 100644<br>
--- a/include/asm-generic/bug.h<br>
+++ b/include/asm-generic/bug.h<br>
@@ -241,6 +241,22 @@ void __warn(const char *file, int line, void *caller, unsigned taint,<br>
 # define WARN_ON_SMP(x)			({0;})<br>
 #endif<br>
 <br>
+/*<br>
+ * WARN_ON_FUNCTION_MISMATCH() warns if a value doesn't match a<br>
+ * function address, and can be useful for catching issues with<br>
+ * callback functions, for example.<br>
+ *<br>
+ * With CONFIG_CFI_CLANG, the warning is disabled because the<br>
+ * compiler replaces function addresses taken in C code with<br>
+ * local jump table addresses, which breaks cross-module function<br>
+ * address equality.<br>
+ */<br>
+#if defined(CONFIG_CFI_CLANG) && defined(CONFIG_MODULES)<br>
+# define WARN_ON_FUNCTION_MISMATCH(x, fn) ({ 0; })<br>
+#else<br>
+# define WARN_ON_FUNCTION_MISMATCH(x, fn) WARN_ON_ONCE((x) != (fn))<br>
+#endif<br>
+<br>
 #endif /* __ASSEMBLY__ */<br>
 <br>
 #endif<br>
diff --git a/include/asm-generic/vmlinux.lds.h b/include/asm-generic/vmlinux.lds.h<br>
index 0331d5d49551..40a9c101565e 100644<br>
--- a/include/asm-generic/vmlinux.lds.h<br>
+++ b/include/asm-generic/vmlinux.lds.h<br>
@@ -544,6 +544,22 @@<br>
 	. = ALIGN((align));						\<br>
 	__end_rodata = .;<br>
 <br>
+<br>
+/*<br>
+ * .text..L.cfi.jumptable.* contain Control-Flow Integrity (CFI)<br>
+ * jump table entries.<br>
+ */<br>
+#ifdef CONFIG_CFI_CLANG<br>
+#define TEXT_CFI_JT							\<br>
+		. = ALIGN(PMD_SIZE);					\<br>
+		__cfi_jt_start = .;					\<br>
+		*(.text..L.cfi.jumptable .text..L.cfi.jumptable.*)	\<br>
+		. = ALIGN(PMD_SIZE);					\<br>
+		__cfi_jt_end = .;<br>
+#else<br>
+#define TEXT_CFI_JT<br>
+#endif<br>
+<br>
 /*<br>
  * Non-instrumentable text section<br>
  */<br>
@@ -570,6 +586,7 @@<br>
 		NOINSTR_TEXT						\<br>
 		*(.text..refcount)					\<br>
 		*(.ref.text)						\<br>
+		TEXT_CFI_JT						\<br>
 	MEM_KEEP(init.text*)						\<br>
 	MEM_KEEP(exit.text*)						\<br>
 <br>
@@ -974,7 +991,8 @@<br>
  * keep any .init_array.* sections.<br>
  * <a  rel="nofollow" href="https://bugs.llvm.org/show_bug.cgi?id=46478">https://bugs.llvm.org/show_bug.cgi?id=46478</a><br>
  */<br>
-#if defined(CONFIG_GCOV_KERNEL) || defined(CONFIG_KASAN_GENERIC) || defined(CONFIG_KCSAN)<br>
+#if defined(CONFIG_GCOV_KERNEL) || defined(CONFIG_KASAN_GENERIC) || defined(CONFIG_KCSAN) || \<br>
+	defined(CONFIG_CFI_CLANG)<br>
 # ifdef CONFIG_CONSTRUCTORS<br>
 #  define SANITIZER_DISCARDS						\<br>
 	*(.eh_frame)<br>
diff --git a/include/linux/cfi.h b/include/linux/cfi.h<br>
new file mode 100644<br>
index 000000000000..879744aaa6e0<br>
--- /dev/null<br>
+++ b/include/linux/cfi.h<br>
@@ -0,0 +1,41 @@<br>
+/* SPDX-License-Identifier: GPL-2.0 */<br>
+/*<br>
+ * Clang Control Flow Integrity (CFI) support.<br>
+ *<br>
+ * Copyright (C) 2021 Google LLC<br>
+ */<br>
+#ifndef _LINUX_CFI_H<br>
+#define _LINUX_CFI_H<br>
+<br>
+#ifdef CONFIG_CFI_CLANG<br>
+typedef void (*cfi_check_fn)(uint64_t id, void *ptr, void *diag);<br>
+<br>
+/* Compiler-generated function in each module, and the kernel */<br>
+extern void __cfi_check(uint64_t id, void *ptr, void *diag);<br>
+<br>
+/*<br>
+ * Force the compiler to generate a CFI jump table entry for a function<br>
+ * and store the jump table address to __cfi_jt_<function>.<br>
+ */<br>
+#define __CFI_ADDRESSABLE(fn, __attr) \<br>
+	const void *__cfi_jt_ ## fn __visible __attr = (void *)&fn<br>
+<br>
+#ifdef CONFIG_CFI_CLANG_SHADOW<br>
+<br>
+extern void cfi_module_add(struct module *mod, unsigned long base_addr);<br>
+extern void cfi_module_remove(struct module *mod, unsigned long base_addr);<br>
+<br>
+#else<br>
+<br>
+static inline void cfi_module_add(struct module *mod, unsigned long base_addr) {}<br>
+static inline void cfi_module_remove(struct module *mod, unsigned long base_addr) {}<br>
+<br>
+#endif /* CONFIG_CFI_CLANG_SHADOW */<br>
+<br>
+#else /* !CONFIG_CFI_CLANG */<br>
+<br>
+#define __CFI_ADDRESSABLE(fn, __attr)<br>
+<br>
+#endif /* CONFIG_CFI_CLANG */<br>
+<br>
+#endif /* _LINUX_CFI_H */<br>
diff --git a/include/linux/compiler-clang.h b/include/linux/compiler-clang.h<br>
index d217c382b02d..6de9d0c9377e 100644<br>
--- a/include/linux/compiler-clang.h<br>
+++ b/include/linux/compiler-clang.h<br>
@@ -61,3 +61,5 @@<br>
 #if __has_feature(shadow_call_stack)<br>
 # define __noscs	__attribute__((__no_sanitize__("shadow-call-stack")))<br>
 #endif<br>
+<br>
+#define __nocfi		__attribute__((__no_sanitize__("cfi")))<br>
diff --git a/include/linux/compiler_types.h b/include/linux/compiler_types.h<br>
index e5dd5a4ae946..796935a37e37 100644<br>
--- a/include/linux/compiler_types.h<br>
+++ b/include/linux/compiler_types.h<br>
@@ -242,6 +242,10 @@ struct ftrace_likely_data {<br>
 # define __noscs<br>
 #endif<br>
 <br>
+#ifndef __nocfi<br>
+# define __nocfi<br>
+#endif<br>
+<br>
 #ifndef asm_volatile_goto<br>
 #define asm_volatile_goto(x...) asm goto(x)<br>
 #endif<br>
diff --git a/include/linux/init.h b/include/linux/init.h<br>
index 31f54de58429..b3ea15348fbd 100644<br>
--- a/include/linux/init.h<br>
+++ b/include/linux/init.h<br>
@@ -47,7 +47,7 @@<br>
 <br>
 /* These are for everybody (although not all archs will actually<br>
    discard it in modules) */<br>
-#define __init		__section(".init.text") __cold  __latent_entropy __noinitretpoline<br>
+#define __init		__section(".init.text") __cold  __latent_entropy __noinitretpoline __nocfi<br>
 #define __initdata	__section(".init.data")<br>
 #define __initconst	__section(".init.rodata")<br>
 #define __exitdata	__section(".exit.data")<br>
diff --git a/include/linux/module.h b/include/linux/module.h<br>
index da4b6fbe8ebe..8100bb477d86 100644<br>
--- a/include/linux/module.h<br>
+++ b/include/linux/module.h<br>
@@ -26,6 +26,7 @@<br>
 #include <linux/tracepoint-defs.h><br>
 #include <linux/srcu.h><br>
 #include <linux/static_call_types.h><br>
+#include <linux/cfi.h><br>
 <br>
 #include <linux/percpu.h><br>
 #include <asm/module.h><br>
@@ -128,13 +129,17 @@ extern void cleanup_module(void);<br>
 #define module_init(initfn)					\<br>
 	static inline initcall_t __maybe_unused __inittest(void)		\<br>
 	{ return initfn; }					\<br>
-	int init_module(void) __copy(initfn) __attribute__((alias(#initfn)));<br>
+	int init_module(void) __copy(initfn)			\<br>
+		__attribute__((alias(#initfn)));		\<br>
+	__CFI_ADDRESSABLE(init_module, __initdata);<br>
 <br>
 /* This is only required if you want to be unloadable. */<br>
 #define module_exit(exitfn)					\<br>
 	static inline exitcall_t __maybe_unused __exittest(void)		\<br>
 	{ return exitfn; }					\<br>
-	void cleanup_module(void) __copy(exitfn) __attribute__((alias(#exitfn)));<br>
+	void cleanup_module(void) __copy(exitfn)		\<br>
+		__attribute__((alias(#exitfn)));		\<br>
+	__CFI_ADDRESSABLE(cleanup_module, __exitdata);<br>
 <br>
 #endif<br>
 <br>
@@ -376,6 +381,10 @@ struct module {<br>
 	const s32 *crcs;<br>
 	unsigned int num_syms;<br>
 <br>
+#ifdef CONFIG_CFI_CLANG<br>
+	cfi_check_fn cfi_check;<br>
+#endif<br>
+<br>
 	/* Kernel parameters. */<br>
 #ifdef CONFIG_SYSFS<br>
 	struct mutex param_lock;<br>
diff --git a/init/Kconfig b/init/Kconfig<br>
index 5f5c776ef192..5babea38e346 100644<br>
--- a/init/Kconfig<br>
+++ b/init/Kconfig<br>
@@ -2296,7 +2296,7 @@ endif # MODULES<br>
 <br>
 config MODULES_TREE_LOOKUP<br>
 	def_bool y<br>
-	depends on PERF_EVENTS || TRACING<br>
+	depends on PERF_EVENTS || TRACING || CFI_CLANG<br>
 <br>
 config INIT_ALL_POSSIBLE<br>
 	bool<br>
diff --git a/kernel/Makefile b/kernel/Makefile<br>
index 320f1f3941b7..e8a6715f38dc 100644<br>
--- a/kernel/Makefile<br>
+++ b/kernel/Makefile<br>
@@ -41,6 +41,9 @@ KCSAN_SANITIZE_kcov.o := n<br>
 UBSAN_SANITIZE_kcov.o := n<br>
 CFLAGS_kcov.o := $(call cc-option, -fno-conserve-stack) -fno-stack-protector<br>
 <br>
+# Don't instrument error handlers<br>
+CFLAGS_REMOVE_cfi.o := $(CC_FLAGS_CFI)<br>
+<br>
 obj-y += sched/<br>
 obj-y += locking/<br>
 obj-y += power/<br>
@@ -111,6 +114,7 @@ obj-$(CONFIG_BPF) += bpf/<br>
 obj-$(CONFIG_KCSAN) += kcsan/<br>
 obj-$(CONFIG_SHADOW_CALL_STACK) += scs.o<br>
 obj-$(CONFIG_HAVE_STATIC_CALL_INLINE) += static_call.o<br>
+obj-$(CONFIG_CFI_CLANG) += cfi.o<br>
 <br>
 obj-$(CONFIG_PERF_EVENTS) += events/<br>
 <br>
diff --git a/kernel/cfi.c b/kernel/cfi.c<br>
new file mode 100644<br>
index 000000000000..e17a56639766<br>
--- /dev/null<br>
+++ b/kernel/cfi.c<br>
@@ -0,0 +1,329 @@<br>
+// SPDX-License-Identifier: GPL-2.0<br>
+/*<br>
+ * Clang Control Flow Integrity (CFI) error and slowpath handling.<br>
+ *<br>
+ * Copyright (C) 2021 Google LLC<br>
+ */<br>
+<br>
+#include <linux/hardirq.h><br>
+#include <linux/kallsyms.h><br>
+#include <linux/module.h><br>
+#include <linux/mutex.h><br>
+#include <linux/printk.h><br>
+#include <linux/ratelimit.h><br>
+#include <linux/rcupdate.h><br>
+#include <linux/vmalloc.h><br>
+#include <asm/cacheflush.h><br>
+#include <asm/set_memory.h><br>
+<br>
+/* Compiler-defined handler names */<br>
+#ifdef CONFIG_CFI_PERMISSIVE<br>
+#define cfi_failure_handler	__ubsan_handle_cfi_check_fail<br>
+#else<br>
+#define cfi_failure_handler	__ubsan_handle_cfi_check_fail_abort<br>
+#endif<br>
+<br>
+static inline void handle_cfi_failure(void *ptr)<br>
+{<br>
+	if (IS_ENABLED(CONFIG_CFI_PERMISSIVE))<br>
+		WARN_RATELIMIT(1, "CFI failure (target: %pS):\n", ptr);<br>
+	else<br>
+		panic("CFI failure (target: %pS)\n", ptr);<br>
+}<br>
+<br>
+#ifdef CONFIG_MODULES<br>
+#ifdef CONFIG_CFI_CLANG_SHADOW<br>
+/*<br>
+ * Index type. A 16-bit index can address at most (2^16)-2 pages (taking<br>
+ * into account SHADOW_INVALID), i.e. ~256M with 4k pages.<br>
+ */<br>
+typedef u16 shadow_t;<br>
+#define SHADOW_INVALID		((shadow_t)~0UL)<br>
+<br>
+struct cfi_shadow {<br>
+	/* Page index for the beginning of the shadow */<br>
+	unsigned long base;<br>
+	/* An array of __cfi_check locations (as indices to the shadow) */<br>
+	shadow_t shadow[1];<br>
+} __packed;<br>
+<br>
+/*<br>
+ * The shadow covers ~128M from the beginning of the module region. If<br>
+ * the region is larger, we fall back to __module_address for the rest.<br>
+ */<br>
+#define __SHADOW_RANGE		(_UL(SZ_128M) >> PAGE_SHIFT)<br>
+<br>
+/* The in-memory size of struct cfi_shadow, always at least one page */<br>
+#define __SHADOW_PAGES		((__SHADOW_RANGE * sizeof(shadow_t)) >> PAGE_SHIFT)<br>
+#define SHADOW_PAGES		max(1UL, __SHADOW_PAGES)<br>
+#define SHADOW_SIZE		(SHADOW_PAGES << PAGE_SHIFT)<br>
+<br>
+/* The actual size of the shadow array, minus metadata */<br>
+#define SHADOW_ARR_SIZE		(SHADOW_SIZE - offsetof(struct cfi_shadow, shadow))<br>
+#define SHADOW_ARR_SLOTS	(SHADOW_ARR_SIZE / sizeof(shadow_t))<br>
+<br>
+static DEFINE_MUTEX(shadow_update_lock);<br>
+static struct cfi_shadow __rcu *cfi_shadow __read_mostly;<br>
+<br>
+/* Returns the index in the shadow for the given address */<br>
+static inline int ptr_to_shadow(const struct cfi_shadow *s, unsigned long ptr)<br>
+{<br>
+	unsigned long index;<br>
+	unsigned long page = ptr >> PAGE_SHIFT;<br>
+<br>
+	if (unlikely(page < s->base))<br>
+		return -1; /* Outside of module area */<br>
+<br>
+	index = page - s->base;<br>
+<br>
+	if (index >= SHADOW_ARR_SLOTS)<br>
+		return -1; /* Cannot be addressed with shadow */<br>
+<br>
+	return (int)index;<br>
+}<br>
+<br>
+/* Returns the page address for an index in the shadow */<br>
+static inline unsigned long shadow_to_ptr(const struct cfi_shadow *s,<br>
+	int index)<br>
+{<br>
+	if (unlikely(index < 0 || index >= SHADOW_ARR_SLOTS))<br>
+		return 0;<br>
+<br>
+	return (s->base + index) << PAGE_SHIFT;<br>
+}<br>
+<br>
+/* Returns the __cfi_check function address for the given shadow location */<br>
+static inline unsigned long shadow_to_check_fn(const struct cfi_shadow *s,<br>
+	int index)<br>
+{<br>
+	if (unlikely(index < 0 || index >= SHADOW_ARR_SLOTS))<br>
+		return 0;<br>
+<br>
+	if (unlikely(s->shadow[index] == SHADOW_INVALID))<br>
+		return 0;<br>
+<br>
+	/* __cfi_check is always page aligned */<br>
+	return (s->base + s->shadow[index]) << PAGE_SHIFT;<br>
+}<br>
+<br>
+static void prepare_next_shadow(const struct cfi_shadow __rcu *prev,<br>
+		struct cfi_shadow *next)<br>
+{<br>
+	int i, index, check;<br>
+<br>
+	/* Mark everything invalid */<br>
+	memset(next->shadow, 0xFF, SHADOW_ARR_SIZE);<br>
+<br>
+	if (!prev)<br>
+		return; /* No previous shadow */<br>
+<br>
+	/* If the base address didn't change, an update is not needed */<br>
+	if (prev->base == next->base) {<br>
+		memcpy(next->shadow, prev->shadow, SHADOW_ARR_SIZE);<br>
+		return;<br>
+	}<br>
+<br>
+	/* Convert the previous shadow to the new address range */<br>
+	for (i = 0; i < SHADOW_ARR_SLOTS; ++i) {<br>
+		if (prev->shadow[i] == SHADOW_INVALID)<br>
+			continue;<br>
+<br>
+		index = ptr_to_shadow(next, shadow_to_ptr(prev, i));<br>
+		if (index < 0)<br>
+			continue;<br>
+<br>
+		check = ptr_to_shadow(next,<br>
+				shadow_to_check_fn(prev, prev->shadow[i]));<br>
+		if (check < 0)<br>
+			continue;<br>
+<br>
+		next->shadow[index] = (shadow_t)check;<br>
+	}<br>
+}<br>
+<br>
+static void add_module_to_shadow(struct cfi_shadow *s, struct module *mod,<br>
+			unsigned long min_addr, unsigned long max_addr)<br>
+{<br>
+	int check_index;<br>
+	unsigned long check = (unsigned long)mod->cfi_check;<br>
+	unsigned long ptr;<br>
+<br>
+	if (unlikely(!PAGE_ALIGNED(check))) {<br>
+		pr_warn("cfi: not using shadow for module %s\n", mod->name);<br>
+		return;<br>
+	}<br>
+<br>
+	check_index = ptr_to_shadow(s, check);<br>
+	if (check_index < 0)<br>
+		return; /* Module not addressable with shadow */<br>
+<br>
+	/* For each page, store the check function index in the shadow */<br>
+	for (ptr = min_addr; ptr <= max_addr; ptr += PAGE_SIZE) {<br>
+		int index = ptr_to_shadow(s, ptr);<br>
+<br>
+		if (index >= 0) {<br>
+			/* Each page must only contain one module */<br>
+			WARN_ON_ONCE(s->shadow[index] != SHADOW_INVALID);<br>
+			s->shadow[index] = (shadow_t)check_index;<br>
+		}<br>
+	}<br>
+}<br>
+<br>
+static void remove_module_from_shadow(struct cfi_shadow *s, struct module *mod,<br>
+		unsigned long min_addr, unsigned long max_addr)<br>
+{<br>
+	unsigned long ptr;<br>
+<br>
+	for (ptr = min_addr; ptr <= max_addr; ptr += PAGE_SIZE) {<br>
+		int index = ptr_to_shadow(s, ptr);<br>
+<br>
+		if (index >= 0)<br>
+			s->shadow[index] = SHADOW_INVALID;<br>
+	}<br>
+}<br>
+<br>
+typedef void (*update_shadow_fn)(struct cfi_shadow *, struct module *,<br>
+			unsigned long min_addr, unsigned long max_addr);<br>
+<br>
+static void update_shadow(struct module *mod, unsigned long base_addr,<br>
+		update_shadow_fn fn)<br>
+{<br>
+	struct cfi_shadow *prev;<br>
+	struct cfi_shadow *next;<br>
+	unsigned long min_addr, max_addr;<br>
+<br>
+	next = vmalloc(SHADOW_SIZE);<br>
+<br>
+	mutex_lock(&shadow_update_lock);<br>
+	prev = rcu_dereference_protected(cfi_shadow,<br>
+					 mutex_is_locked(&shadow_update_lock));<br>
+<br>
+	if (next) {<br>
+		next->base = base_addr >> PAGE_SHIFT;<br>
+		prepare_next_shadow(prev, next);<br>
+<br>
+		min_addr = (unsigned long)mod->core_layout.base;<br>
+		max_addr = min_addr + mod->core_layout.text_size;<br>
+		fn(next, mod, min_addr & PAGE_MASK, max_addr & PAGE_MASK);<br>
+<br>
+		set_memory_ro((unsigned long)next, SHADOW_PAGES);<br>
+	}<br>
+<br>
+	rcu_assign_pointer(cfi_shadow, next);<br>
+	mutex_unlock(&shadow_update_lock);<br>
+	synchronize_rcu();<br>
+<br>
+	if (prev) {<br>
+		set_memory_rw((unsigned long)prev, SHADOW_PAGES);<br>
+		vfree(prev);<br>
+	}<br>
+}<br>
+<br>
+void cfi_module_add(struct module *mod, unsigned long base_addr)<br>
+{<br>
+	update_shadow(mod, base_addr, add_module_to_shadow);<br>
+}<br>
+<br>
+void cfi_module_remove(struct module *mod, unsigned long base_addr)<br>
+{<br>
+	update_shadow(mod, base_addr, remove_module_from_shadow);<br>
+}<br>
+<br>
+static inline cfi_check_fn ptr_to_check_fn(const struct cfi_shadow __rcu *s,<br>
+	unsigned long ptr)<br>
+{<br>
+	int index;<br>
+<br>
+	if (unlikely(!s))<br>
+		return NULL; /* No shadow available */<br>
+<br>
+	index = ptr_to_shadow(s, ptr);<br>
+	if (index < 0)<br>
+		return NULL; /* Cannot be addressed with shadow */<br>
+<br>
+	return (cfi_check_fn)shadow_to_check_fn(s, index);<br>
+}<br>
+<br>
+static inline cfi_check_fn find_shadow_check_fn(unsigned long ptr)<br>
+{<br>
+	cfi_check_fn fn;<br>
+<br>
+	rcu_read_lock_sched();<br>
+	fn = ptr_to_check_fn(rcu_dereference_sched(cfi_shadow), ptr);<br>
+	rcu_read_unlock_sched();<br>
+<br>
+	return fn;<br>
+}<br>
+<br>
+#else /* !CONFIG_CFI_CLANG_SHADOW */<br>
+<br>
+static inline cfi_check_fn find_shadow_check_fn(unsigned long ptr)<br>
+{<br>
+	return NULL;<br>
+}<br>
+<br>
+#endif /* CONFIG_CFI_CLANG_SHADOW */<br>
+<br>
+static inline cfi_check_fn find_module_check_fn(unsigned long ptr)<br>
+{<br>
+	cfi_check_fn fn = NULL;<br>
+	struct module *mod;<br>
+<br>
+	rcu_read_lock_sched();<br>
+	mod = __module_address(ptr);<br>
+	if (mod)<br>
+		fn = mod->cfi_check;<br>
+	rcu_read_unlock_sched();<br>
+<br>
+	return fn;<br>
+}<br>
+<br>
+static inline cfi_check_fn find_check_fn(unsigned long ptr)<br>
+{<br>
+	cfi_check_fn fn = NULL;<br>
+<br>
+	if (is_kernel_text(ptr))<br>
+		return __cfi_check;<br>
+<br>
+	/*<br>
+	 * Indirect call checks can happen when RCU is not watching. Both<br>
+	 * the shadow and __module_address use RCU, so we need to wake it<br>
+	 * up if necessary.<br>
+	 */<br>
+	RCU_NONIDLE({<br>
+		if (IS_ENABLED(CONFIG_CFI_CLANG_SHADOW))<br>
+			fn = find_shadow_check_fn(ptr);<br>
+<br>
+		if (!fn)<br>
+			fn = find_module_check_fn(ptr);<br>
+	});<br>
+<br>
+	return fn;<br>
+}<br>
+<br>
+void __cfi_slowpath_diag(uint64_t id, void *ptr, void *diag)<br>
+{<br>
+	cfi_check_fn fn = find_check_fn((unsigned long)ptr);<br>
+<br>
+	if (likely(fn))<br>
+		fn(id, ptr, diag);<br>
+	else /* Don't allow unchecked modules */<br>
+		handle_cfi_failure(ptr);<br>
+}<br>
+EXPORT_SYMBOL(__cfi_slowpath_diag);<br>
+<br>
+#else /* !CONFIG_MODULES */<br>
+<br>
+void __cfi_slowpath_diag(uint64_t id, void *ptr, void *diag)<br>
+{<br>
+	handle_cfi_failure(ptr); /* No modules */<br>
+}<br>
+EXPORT_SYMBOL(__cfi_slowpath_diag);<br>
+<br>
+#endif /* CONFIG_MODULES */<br>
+<br>
+void cfi_failure_handler(void *data, void *ptr, void *vtable)<br>
+{<br>
+	handle_cfi_failure(ptr);<br>
+}<br>
+EXPORT_SYMBOL(cfi_failure_handler);<br>
diff --git a/kernel/module.c b/kernel/module.c<br>
index 30479355ab85..20fb004e7d8d 100644<br>
--- a/kernel/module.c<br>
+++ b/kernel/module.c<br>
@@ -2146,6 +2146,8 @@ void __weak module_arch_freeing_init(struct module *mod)<br>
 {<br>
 }<br>
 <br>
+static void cfi_cleanup(struct module *mod);<br>
+<br>
 /* Free a module, remove from lists, etc. */<br>
 static void free_module(struct module *mod)<br>
 {<br>
@@ -2187,6 +2189,9 @@ static void free_module(struct module *mod)<br>
 	synchronize_rcu();<br>
 	mutex_unlock(&module_mutex);<br>
 <br>
+	/* Clean up CFI for the module. */<br>
+	cfi_cleanup(mod);<br>
+<br>
 	/* This may be empty, but that's OK */<br>
 	module_arch_freeing_init(mod);<br>
 	module_memfree(mod->init_layout.base);<br>
@@ -3866,6 +3871,8 @@ static int unknown_module_param_cb(char *param, char *val, const char *modname,<br>
 	return 0;<br>
 }<br>
 <br>
+static void cfi_init(struct module *mod);<br>
+<br>
 /*<br>
  * Allocate and load the module: note that size of section 0 is always<br>
  * zero, and we rely on this for optional sections.<br>
@@ -3997,6 +4004,9 @@ static int load_module(struct load_info *info, const char __user *uargs,<br>
 <br>
 	flush_module_icache(mod);<br>
 <br>
+	/* Setup CFI for the module. */<br>
+	cfi_init(mod);<br>
+<br>
 	/* Now copy in args */<br>
 	mod->args = strndup_user(uargs, ~0UL >> 1);<br>
 	if (IS_ERR(mod->args)) {<br>
@@ -4070,6 +4080,7 @@ static int load_module(struct load_info *info, const char __user *uargs,<br>
 	synchronize_rcu();<br>
 	kfree(mod->args);<br>
  free_arch_cleanup:<br>
+	cfi_cleanup(mod);<br>
 	module_arch_cleanup(mod);<br>
  free_modinfo:<br>
 	free_modinfo(mod);<br>
@@ -4415,6 +4426,38 @@ int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,<br>
 #endif /* CONFIG_LIVEPATCH */<br>
 #endif /* CONFIG_KALLSYMS */<br>
 <br>
+static void cfi_init(struct module *mod)<br>
+{<br>
+#ifdef CONFIG_CFI_CLANG<br>
+	initcall_t *init;<br>
+	exitcall_t *exit;<br>
+<br>
+	rcu_read_lock_sched();<br>
+	mod->cfi_check = (cfi_check_fn)<br>
+		find_kallsyms_symbol_value(mod, "__cfi_check");<br>
+	init = (initcall_t *)<br>
+		find_kallsyms_symbol_value(mod, "__cfi_jt_init_module");<br>
+	exit = (exitcall_t *)<br>
+		find_kallsyms_symbol_value(mod, "__cfi_jt_cleanup_module");<br>
+	rcu_read_unlock_sched();<br>
+<br>
+	/* Fix init/exit functions to point to the CFI jump table */<br>
+	if (init)<br>
+		mod->init = *init;<br>
+	if (exit)<br>
+		mod->exit = *exit;<br>
+<br>
+	cfi_module_add(mod, module_addr_min);<br>
+#endif<br>
+}<br>
+<br>
+static void cfi_cleanup(struct module *mod)<br>
+{<br>
+#ifdef CONFIG_CFI_CLANG<br>
+	cfi_module_remove(mod, module_addr_min);<br>
+#endif<br>
+}<br>
+<br>
 /* Maximum number of characters written by module_flags() */<br>
 #define MODULE_FLAGS_BUF_SIZE (TAINT_FLAGS_COUNT + 4)<br>
 <br>
diff --git a/scripts/Makefile.modfinal b/scripts/Makefile.modfinal<br>
index 735e11e9041b..dd87cea9fba7 100644<br>
--- a/scripts/Makefile.modfinal<br>
+++ b/scripts/Makefile.modfinal<br>
@@ -23,7 +23,7 @@ modname = $(notdir $(@:.mod.o=))<br>
 part-of-module = y<br>
 <br>
 quiet_cmd_cc_o_c = CC [M]  $@<br>
-      cmd_cc_o_c = $(CC) $(c_flags) -c -o $@ $<<br>
+      cmd_cc_o_c = $(CC) $(filter-out $(CC_FLAGS_CFI), $(c_flags)) -c -o $@ $<<br>
 <br>
 %.mod.o: %.mod.c FORCE<br>
 	$(call if_changed_dep,cc_o_c)<br>
-- <br>
2.31.1.295.g9ea45b61b8-goog<br>
<br>
<br>


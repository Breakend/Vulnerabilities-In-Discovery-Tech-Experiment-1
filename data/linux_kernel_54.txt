With CONFIG_CFI_CLANG and ThinLTO, Clang appends a hash to the names<br>
of all static functions not marked __used. This can break userspace<br>
tools that don't expect the function name to change, so strip out the<br>
hash from the output.<br>
<br>
Suggested-by: Jack Pham <jackp@xxxxxxxxxxxxxx><br>
Signed-off-by: Sami Tolvanen <samitolvanen@xxxxxxxxxx><br>
Reviewed-by: Kees Cook <keescook@xxxxxxxxxxxx><br>
Tested-by: Nathan Chancellor <nathan@xxxxxxxxxx><br>
---<br>
 kernel/kallsyms.c | 55 ++++++++++++++++++++++++++++++++++++++++++-----<br>
 1 file changed, 50 insertions(+), 5 deletions(-)<br>
<br>
diff --git a/kernel/kallsyms.c b/kernel/kallsyms.c<br>
index 8043a90aa50e..c851ca0ed357 100644<br>
--- a/kernel/kallsyms.c<br>
+++ b/kernel/kallsyms.c<br>
@@ -161,6 +161,27 @@ static unsigned long kallsyms_sym_address(int idx)<br>
 	return kallsyms_relative_base - 1 - kallsyms_offsets[idx];<br>
 }<br>
 <br>
+#if defined(CONFIG_CFI_CLANG) && defined(CONFIG_LTO_CLANG_THIN)<br>
+/*<br>
+ * LLVM appends a hash to static function names when ThinLTO and CFI are<br>
+ * both enabled, i.e. foo() becomes foo$707af9a22804d33c81801f27dcfe489b.<br>
+ * This causes confusion and potentially breaks user space tools, so we<br>
+ * strip the suffix from expanded symbol names.<br>
+ */<br>
+static inline bool cleanup_symbol_name(char *s)<br>
+{<br>
+	char *res;<br>
+<br>
+	res = strrchr(s, '$');<br>
+	if (res)<br>
+		*res = '\0';<br>
+<br>
+	return res != NULL;<br>
+}<br>
+#else<br>
+static inline bool cleanup_symbol_name(char *s) { return false; }<br>
+#endif<br>
+<br>
 /* Lookup the address for this symbol. Returns 0 if not found. */<br>
 unsigned long kallsyms_lookup_name(const char *name)<br>
 {<br>
@@ -173,6 +194,9 @@ unsigned long kallsyms_lookup_name(const char *name)<br>
 <br>
 		if (strcmp(namebuf, name) == 0)<br>
 			return kallsyms_sym_address(i);<br>
+<br>
+		if (cleanup_symbol_name(namebuf) && strcmp(namebuf, name) == 0)<br>
+			return kallsyms_sym_address(i);<br>
 	}<br>
 	return module_kallsyms_lookup_name(name);<br>
 }<br>
@@ -303,7 +327,9 @@ const char *kallsyms_lookup(unsigned long addr,<br>
 				       namebuf, KSYM_NAME_LEN);<br>
 		if (modname)<br>
 			*modname = NULL;<br>
-		return namebuf;<br>
+<br>
+		ret = namebuf;<br>
+		goto found;<br>
 	}<br>
 <br>
 	/* See if it's in a module or a BPF JITed image. */<br>
@@ -316,11 +342,16 @@ const char *kallsyms_lookup(unsigned long addr,<br>
 	if (!ret)<br>
 		ret = ftrace_mod_address_lookup(addr, symbolsize,<br>
 						offset, modname, namebuf);<br>
+<br>
+found:<br>
+	cleanup_symbol_name(namebuf);<br>
 	return ret;<br>
 }<br>
 <br>
 int lookup_symbol_name(unsigned long addr, char *symname)<br>
 {<br>
+	int res;<br>
+<br>
 	symname[0] = '\0';<br>
 	symname[KSYM_NAME_LEN - 1] = '\0';<br>
 <br>
@@ -331,15 +362,23 @@ int lookup_symbol_name(unsigned long addr, char *symname)<br>
 		/* Grab name */<br>
 		kallsyms_expand_symbol(get_symbol_offset(pos),<br>
 				       symname, KSYM_NAME_LEN);<br>
-		return 0;<br>
+		goto found;<br>
 	}<br>
 	/* See if it's in a module. */<br>
-	return lookup_module_symbol_name(addr, symname);<br>
+	res = lookup_module_symbol_name(addr, symname);<br>
+	if (res)<br>
+		return res;<br>
+<br>
+found:<br>
+	cleanup_symbol_name(symname);<br>
+	return 0;<br>
 }<br>
 <br>
 int lookup_symbol_attrs(unsigned long addr, unsigned long *size,<br>
 			unsigned long *offset, char *modname, char *name)<br>
 {<br>
+	int res;<br>
+<br>
 	name[0] = '\0';<br>
 	name[KSYM_NAME_LEN - 1] = '\0';<br>
 <br>
@@ -351,10 +390,16 @@ int lookup_symbol_attrs(unsigned long addr, unsigned long *size,<br>
 		kallsyms_expand_symbol(get_symbol_offset(pos),<br>
 				       name, KSYM_NAME_LEN);<br>
 		modname[0] = '\0';<br>
-		return 0;<br>
+		goto found;<br>
 	}<br>
 	/* See if it's in a module. */<br>
-	return lookup_module_symbol_attrs(addr, size, offset, modname, name);<br>
+	res = lookup_module_symbol_attrs(addr, size, offset, modname, name);<br>
+	if (res)<br>
+		return res;<br>
+<br>
+found:<br>
+	cleanup_symbol_name(name);<br>
+	return 0;<br>
 }<br>
 <br>
 /* Look up a kernel symbol and return it in a text buffer. */<br>
-- <br>
2.31.1.295.g9ea45b61b8-goog<br>
<br>
<br>


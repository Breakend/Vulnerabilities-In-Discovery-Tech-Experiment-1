On Wed, 7 Apr 2021 15:26:21 -0700<br>
Ben Widawsky <ben.widawsky@xxxxxxxxx> wrote:<br>
<br>
><i> Start moving code around to ultimately get rid of @cxlm.base. The</i><br>
><i> @cxlm.base member serves no purpose other than intermediate storage of</i><br>
><i> the offset found in cxl_mem_map_regblock() later used by</i><br>
><i> cxl_mem_setup_regs(). Aside from wanting to get rid of this useless</i><br>
><i> member, it will help later when adding new register block identifiers.</i><br>
><i> </i><br>
><i> While @cxlm.base still exists, it will become trivial to remove it in a</i><br>
><i> future patch.</i><br>
><i> </i><br>
><i> No functional change is meant to be introduced in this patch.</i><br>
><i> </i><br>
><i> Signed-off-by: Ben Widawsky <ben.widawsky@xxxxxxxxx></i><br>
<br>
Seems like a noop refactor to me as you say.<br>
<br>
Reviewed-by: Jonathan Cameron <Jonathan.Cameron@xxxxxxxxxx><br>
<br>
><i> ---</i><br>
><i>  drivers/cxl/mem.c | 135 +++++++++++++++++++++++-----------------------</i><br>
><i>  1 file changed, 68 insertions(+), 67 deletions(-)</i><br>
><i> </i><br>
><i> diff --git a/drivers/cxl/mem.c b/drivers/cxl/mem.c</i><br>
><i> index 520edaf233d4..04b4f7445083 100644</i><br>
><i> --- a/drivers/cxl/mem.c</i><br>
><i> +++ b/drivers/cxl/mem.c</i><br>
><i> @@ -870,34 +870,6 @@ static int cxl_mem_mbox_send_cmd(struct cxl_mem *cxlm, u16 opcode,</i><br>
><i>  	return 0;</i><br>
><i>  }</i><br>
><i>  </i><br>
><i> -/**</i><br>
><i> - * cxl_mem_setup_regs() - Setup necessary MMIO.</i><br>
><i> - * @cxlm: The CXL memory device to communicate with.</i><br>
><i> - *</i><br>
><i> - * Return: 0 if all necessary registers mapped.</i><br>
><i> - *</i><br>
><i> - * A memory device is required by spec to implement a certain set of MMIO</i><br>
><i> - * regions. The purpose of this function is to enumerate and map those</i><br>
><i> - * registers.</i><br>
><i> - */</i><br>
><i> -static int cxl_mem_setup_regs(struct cxl_mem *cxlm)</i><br>
><i> -{</i><br>
><i> -	struct device *dev = &cxlm->pdev->dev;</i><br>
><i> -	struct cxl_regs *regs = &cxlm->regs;</i><br>
><i> -</i><br>
><i> -	cxl_setup_device_regs(dev, cxlm->base, &regs->device_regs);</i><br>
><i> -</i><br>
><i> -	if (!regs->status || !regs->mbox || !regs->memdev) {</i><br>
><i> -		dev_err(dev, "registers not found: %s%s%s\n",</i><br>
><i> -			!regs->status ? "status " : "",</i><br>
><i> -			!regs->mbox ? "mbox " : "",</i><br>
><i> -			!regs->memdev ? "memdev" : "");</i><br>
><i> -		return -ENXIO;</i><br>
><i> -	}</i><br>
><i> -</i><br>
><i> -	return 0;</i><br>
><i> -}</i><br>
><i> -</i><br>
><i>  static int cxl_mem_setup_mailbox(struct cxl_mem *cxlm)</i><br>
><i>  {</i><br>
><i>  	const int cap = readl(cxlm->regs.mbox + CXLDEV_MBOX_CAPS_OFFSET);</i><br>
><i> @@ -1005,6 +977,73 @@ static int cxl_mem_dvsec(struct pci_dev *pdev, int dvsec)</i><br>
><i>  	return 0;</i><br>
><i>  }</i><br>
><i>  </i><br>
><i> +/**</i><br>
><i> + * cxl_mem_setup_regs() - Setup necessary MMIO.</i><br>
><i> + * @cxlm: The CXL memory device to communicate with.</i><br>
><i> + *</i><br>
><i> + * Return: 0 if all necessary registers mapped.</i><br>
><i> + *</i><br>
><i> + * A memory device is required by spec to implement a certain set of MMIO</i><br>
><i> + * regions. The purpose of this function is to enumerate and map those</i><br>
><i> + * registers.</i><br>
><i> + */</i><br>
><i> +static int cxl_mem_setup_regs(struct cxl_mem *cxlm)</i><br>
><i> +{</i><br>
><i> +	struct cxl_regs *regs = &cxlm->regs;</i><br>
><i> +	struct pci_dev *pdev = cxlm->pdev;</i><br>
><i> +	struct device *dev = &pdev->dev;</i><br>
><i> +	u32 regloc_size, regblocks;</i><br>
><i> +	int rc, regloc, i;</i><br>
><i> +</i><br>
><i> +	regloc = cxl_mem_dvsec(pdev, PCI_DVSEC_ID_CXL_REGLOC_OFFSET);</i><br>
><i> +	if (!regloc) {</i><br>
><i> +		dev_err(dev, "register location dvsec not found\n");</i><br>
><i> +		return -ENXIO;</i><br>
><i> +	}</i><br>
><i> +</i><br>
><i> +	/* Get the size of the Register Locator DVSEC */</i><br>
><i> +	pci_read_config_dword(pdev, regloc + PCI_DVSEC_HEADER1, &regloc_size);</i><br>
><i> +	regloc_size = FIELD_GET(PCI_DVSEC_HEADER1_LENGTH_MASK, regloc_size);</i><br>
><i> +</i><br>
><i> +	regloc += PCI_DVSEC_ID_CXL_REGLOC_BLOCK1_OFFSET;</i><br>
><i> +	regblocks = (regloc_size - PCI_DVSEC_ID_CXL_REGLOC_BLOCK1_OFFSET) / 8;</i><br>
><i> +</i><br>
><i> +	for (i = 0; i < regblocks; i++, regloc += 8) {</i><br>
><i> +		u32 reg_lo, reg_hi;</i><br>
><i> +		u8 reg_type;</i><br>
><i> +</i><br>
><i> +		/* "register low and high" contain other bits */</i><br>
><i> +		pci_read_config_dword(pdev, regloc, &reg_lo);</i><br>
><i> +		pci_read_config_dword(pdev, regloc + 4, &reg_hi);</i><br>
><i> +</i><br>
><i> +		reg_type = FIELD_GET(CXL_REGLOC_RBI_MASK, reg_lo);</i><br>
><i> +</i><br>
><i> +		if (reg_type == CXL_REGLOC_RBI_MEMDEV) {</i><br>
><i> +			rc = cxl_mem_map_regblock(cxlm, reg_lo, reg_hi);</i><br>
><i> +			if (rc)</i><br>
><i> +				return rc;</i><br>
><i> +			break;</i><br>
><i> +		}</i><br>
><i> +	}</i><br>
><i> +</i><br>
><i> +	if (i == regblocks) {</i><br>
><i> +		dev_err(dev, "Missing register locator for device registers\n");</i><br>
><i> +		return -ENXIO;</i><br>
><i> +	}</i><br>
><i> +</i><br>
><i> +	cxl_setup_device_regs(dev, cxlm->base, &regs->device_regs);</i><br>
><i> +</i><br>
><i> +	if (!regs->status || !regs->mbox || !regs->memdev) {</i><br>
><i> +		dev_err(dev, "registers not found: %s%s%s\n",</i><br>
><i> +			!regs->status ? "status " : "",</i><br>
><i> +			!regs->mbox ? "mbox " : "",</i><br>
><i> +			!regs->memdev ? "memdev" : "");</i><br>
><i> +		return -ENXIO;</i><br>
><i> +	}</i><br>
><i> +</i><br>
><i> +	return 0;</i><br>
><i> +}</i><br>
><i> +</i><br>
><i>  static struct cxl_memdev *to_cxl_memdev(struct device *dev)</i><br>
><i>  {</i><br>
><i>  	return container_of(dev, struct cxl_memdev, dev);</i><br>
><i> @@ -1410,10 +1449,8 @@ static int cxl_mem_identify(struct cxl_mem *cxlm)</i><br>
><i>  </i><br>
><i>  static int cxl_mem_probe(struct pci_dev *pdev, const struct pci_device_id *id)</i><br>
><i>  {</i><br>
><i> -	struct device *dev = &pdev->dev;</i><br>
><i> -	u32 regloc_size, regblocks;</i><br>
><i>  	struct cxl_mem *cxlm;</i><br>
><i> -	int rc, regloc, i;</i><br>
><i> +	int rc;</i><br>
><i>  </i><br>
><i>  	rc = pcim_enable_device(pdev);</i><br>
><i>  	if (rc)</i><br>
><i> @@ -1423,42 +1460,6 @@ static int cxl_mem_probe(struct pci_dev *pdev, const struct pci_device_id *id)</i><br>
><i>  	if (IS_ERR(cxlm))</i><br>
><i>  		return PTR_ERR(cxlm);</i><br>
><i>  </i><br>
><i> -	regloc = cxl_mem_dvsec(pdev, PCI_DVSEC_ID_CXL_REGLOC_OFFSET);</i><br>
><i> -	if (!regloc) {</i><br>
><i> -		dev_err(dev, "register location dvsec not found\n");</i><br>
><i> -		return -ENXIO;</i><br>
><i> -	}</i><br>
><i> -</i><br>
><i> -	/* Get the size of the Register Locator DVSEC */</i><br>
><i> -	pci_read_config_dword(pdev, regloc + PCI_DVSEC_HEADER1, &regloc_size);</i><br>
><i> -	regloc_size = FIELD_GET(PCI_DVSEC_HEADER1_LENGTH_MASK, regloc_size);</i><br>
><i> -</i><br>
><i> -	regloc += PCI_DVSEC_ID_CXL_REGLOC_BLOCK1_OFFSET;</i><br>
><i> -	regblocks = (regloc_size - PCI_DVSEC_ID_CXL_REGLOC_BLOCK1_OFFSET) / 8;</i><br>
><i> -</i><br>
><i> -	for (i = 0; i < regblocks; i++, regloc += 8) {</i><br>
><i> -		u32 reg_lo, reg_hi;</i><br>
><i> -		u8 reg_type;</i><br>
><i> -</i><br>
><i> -		/* "register low and high" contain other bits */</i><br>
><i> -		pci_read_config_dword(pdev, regloc, &reg_lo);</i><br>
><i> -		pci_read_config_dword(pdev, regloc + 4, &reg_hi);</i><br>
><i> -</i><br>
><i> -		reg_type = FIELD_GET(CXL_REGLOC_RBI_MASK, reg_lo);</i><br>
><i> -</i><br>
><i> -		if (reg_type == CXL_REGLOC_RBI_MEMDEV) {</i><br>
><i> -			rc = cxl_mem_map_regblock(cxlm, reg_lo, reg_hi);</i><br>
><i> -			if (rc)</i><br>
><i> -				return rc;</i><br>
><i> -			break;</i><br>
><i> -		}</i><br>
><i> -	}</i><br>
><i> -</i><br>
><i> -	if (i == regblocks) {</i><br>
><i> -		dev_err(dev, "Missing register locator for device registers\n");</i><br>
><i> -		return -ENXIO;</i><br>
><i> -	}</i><br>
><i> -</i><br>
><i>  	rc = cxl_mem_setup_regs(cxlm);</i><br>
><i>  	if (rc)</i><br>
><i>  		return rc;</i><br>
<br>
<br>


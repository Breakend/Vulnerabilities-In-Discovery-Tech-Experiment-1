Hello Andy, All.<br>
<br>
On Wed, 2021-04-07 at 16:21 +0300, Andy Shevchenko wrote:<br>
><i> On Wed, Apr 7, 2021 at 1:04 PM Matti Vaittinen</i><br>
><i> <matti.vaittinen@xxxxxxxxxxxxxxxxx> wrote:</i><br>
><i> > Provide helper function for IC's implementing regulator</i><br>
><i> > notifications</i><br>
><i> > when an IRQ fires. The helper also works for IRQs which can not be</i><br>
><i> > acked.</i><br>
><i> > Helper can be set to disable the IRQ at handler and then re-</i><br>
><i> > enabling it</i><br>
><i> > on delayed work later. The helper also adds</i><br>
><i> > regulator_get_error_flags()</i><br>
><i> > errors in cache for the duration of IRQ disabling.</i><br>
><i> </i><br>
><i> Thanks for an update, my comments below. After addressing them, feel</i><br>
><i> free to add</i><br>
><i> Reviewed-by: Andy Shevchenko <andy.shevchenko@xxxxxxxxx></i><br>
><i> </i><br>
><i> > Signed-off-by: Matti Vaittinen <matti.vaittinen@xxxxxxxxxxxxxxxxx></i><br>
><i> > </i><br>
><i> >  static int _regulator_get_error_flags(struct regulator_dev *rdev,</i><br>
><i> >                                         unsigned int *flags)</i><br>
><i> >  {</i><br>
><i> > -       int ret;</i><br>
><i> > +       int ret, tmpret;</i><br>
><i> > </i><br>
><i> >         regulator_lock(rdev);</i><br>
><i> > </i><br>
><i> > +       ret = rdev_get_cached_err_flags(rdev);</i><br>
><i> > +</i><br>
><i> >         /* sanity check */</i><br>
><i> > -       if (!rdev->desc->ops->get_error_flags) {</i><br>
><i> > +       if (rdev->desc->ops->get_error_flags) {</i><br>
><i> > +               tmpret = rdev->desc->ops->get_error_flags(rdev,</i><br>
><i> > flags);</i><br>
><i> > +               if (tmpret > 0)</i><br>
><i> > +                       ret |= tmpret;</i><br>
><i> </i><br>
><i> Oh, I don't like this. Easy fix is to rename ret (okay, it's been</i><br>
><i> used</i><br>
><i> elsewhere, so adding then) to something meaningful, like error_flags,</i><br>
><i> then you can easily understand that value should be positive and</i><br>
><i> error</i><br>
><i> codes are negative.</i><br>
<br>
No wonder if this looks hairy. I think I have got this plain wrong. The<br>
rdev_get_cached_err_flags() is not updating the flags. Looks like just<br>
plain mistake from my side. I think I've mixed the returning flags via<br>
parameter and return value. This must be fixed. Well spotted.<br>
<br>
<br>
><i> + */</i><br>
><i> > +void *devm_regulator_irq_helper(struct device *dev,</i><br>
><i> > +                               const struct regulator_irq_desc *d,</i><br>
><i> > int irq,</i><br>
><i> > +                               int irq_flags, int common_errs,</i><br>
><i> > +                               int *per_rdev_errs,</i><br>
><i> > +                               struct regulator_dev **rdev, int</i><br>
><i> > rdev_amount)</i><br>
><i> </i><br>
><i> I didn't get why you need the ** pointer instead of plain pointer.</i><br>
<br>
We have an array of pointers. And we give a pointer to the first<br>
pointer. Maybe it's the lack of coffee but I don't see why a single<br>
pointer would be correct? rdev structures are not in contagious memory,<br>
pointers to rdevs are. So we need address of first pointer, right?<br>
+#include <linux/device.h><br>
<br>
<br>
><i> > +#include <linux/err.h></i><br>
><i> > +#include <linux/kernel.h></i><br>
><i> > +#include <linux/of_irq.h></i><br>
><i> </i><br>
><i> Not sure how this header is used. I haven't found any direct users of</i><br>
><i> it. Perhaps you wanted interrupt.h?</i><br>
<br>
Thanks. I think this specific header may be a leftover from first draft<br>
where I thought I'll use named IRQs. The header was for<br>
 of_irq_get_byname(). That ended up as a mess for everything else but<br>
platform devices :) I'll check the headers, thanks.<br>
<br>
><i> > +#include <linux/regmap.h></i><br>
><i> > +#include <linux/slab.h></i><br>
><i> > +#include <linux/spinlock.h></i><br>
><i> </i><br>
><i> + Blank line? I would separate group of generic headers with</i><br>
><i> particular to the subsystem</i><br>
<br>
I don't see this being used in regulator subsystem - and to tell the<br>
truth, I don't really see the value.<br>
<br>
><i> > +#include <linux/regulator/driver.h></i><br>
<br>
...<br>
<br>
><i> > +</i><br>
><i> > +reread:</i><br>
><i> > +       if (d->fatal_cnt && h->retry_cnt > d->fatal_cnt) {</i><br>
><i> > +               if (d->die)</i><br>
><i> > +                       ret = d->die(rid);</i><br>
><i> > +               else</i><br>
><i> > +                       die_loudly("Regulator HW failure? - no IC</i><br>
><i> > recovery");</i><br>
><i> > +</i><br>
><i> > +               /*</i><br>
><i> > +                * If the 'last resort' IC recovery failed we will</i><br>
><i> > have</i><br>
><i> > +                * nothing else left to do...</i><br>
><i> > +                */</i><br>
><i> > +               if (ret)</i><br>
><i> > +                       die_loudly("Regulator HW failure? - IC</i><br>
><i> > recovery failed");</i><br>
><i> </i><br>
><i> Looking at the above code this will be executed if and only if</i><br>
><i> d->die() is defined, correct?</i><br>
><i> In that case, why not</i><br>
><i> </i><br>
><i> if (d->die) {</i><br>
><i>   ret = ...</i><br>
><i>   if (ret)</i><br>
><i>    rdev_die_loudly(...);</i><br>
><i> } else</i><br>
><i>    rdev_die_loudly(...);</i><br>
><i> </i><br>
><i> ?</i><br>
<br>
I think this should simply be:<br>
<br>
if (!d->die)<br>
	die_loudly("Regulator HW failure? - no IC recovery");<br>
<br>
ret = d->die(rdev);<br>
if (ret)<br>
	die_loudly(...);<br>
<br>
...<br>
<br>
><i> > +static void init_rdev_errors(struct regulator_irq *h)</i><br>
><i> > +{</i><br>
><i> > +       int i;</i><br>
><i> > +</i><br>
><i> > +       for (i = 0; i < h->rdata.num_states; i++) {</i><br>
><i> > +               if (h->rdata.states[i].possible_errs)</i><br>
><i> > +                       /* Can we trust writing this boolean is</i><br>
><i> > atomic? */</i><br>
><i> </i><br>
><i> No. boolean is a compiler / platform specific and it may potentially</i><br>
><i> be written in a non-atomic way.</i><br>
<br>
Hmm.. I don't think this really is a problem here. We only use the<br>
use_cached_err for true/false evaluation - and if error getting api is<br>
called after the boolean is changed - then cached error is used, if<br>
before, then it is not used. Even if the value of the boolean was read<br>
in the middle of writing it, it will still evaluate either true or<br>
false - there is no 'maybe' state :)<br>
<br>
My point, I guess we can do the change without locking here. Please<br>
correct me if I am wrong. I'll just drop this comment.<br>
<br>
><i> </i><br>
><i> re-enable / reenable</i><br>
><i> </i><br>
><i> > + *             added to status. If that is the case it may be</i><br>
><i> > desirable to</i><br>
><i> > + *             return REGULATOR_ERROR_CLEARED and not</i><br>
><i> > REGULATOR_ERROR_ON to</i><br>
><i> > + *             allow IRQ fire again and to generate notifications</i><br>
><i> > also for</i><br>
><i> > + *             the new issues.</i><br>
><i> > + *</i><br>
><i> > + * This structure is passed to map_event and renable for reporting</i><br>
><i> > regulator</i><br>
><i> </i><br>
><i> Ditto.</i><br>
<br>
the "renable" is referring to the callback function pointer which is<br>
named "renable".<br>
<br>
<br>
Best Regards<br>
-- Matti Vaittinen<br>
<br>
<br>


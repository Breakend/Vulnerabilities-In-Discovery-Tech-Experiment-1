Hi,<br>
<br>
On Mi, 2021-04-07T18:27+0000, Barnabás Pőcze wrote:<br>
><i> 2021. április 5., hétfő 22:48 keltezéssel, Thomas Weißschuh írta:</i><br>
><i> > Tested with a X570 I Aorus Pro Wifi.</i><br>
><i> > The mainboard contains an ITE IT8688E chip for management.</i><br>
><i> > This chips is also handled by drivers/hwmon/i87.c but as it is also used</i><br>
><i> > by the firmware itself it needs an ACPI driver.</i><br>
><i> </i><br>
><i> I gather this means you're getting the</i><br>
><i> </i><br>
><i>   ACPI Warning: SystemIO range ... conflicts with ...</i><br>
><i>   ACPI: If an ACPI driver is available for this device, you should use it instead of the native driver</i><br>
><i> </i><br>
><i> warning?</i><br>
<br>
Exactly.<br>
<br>
><i> > +struct gigabyte_wmi_args {</i><br>
><i> > +	u32 arg1;</i><br>
><i> > +};</i><br>
><i> > +</i><br>
><i> > +static int gigabyte_wmi_perform_query(enum gigabyte_wmi_commandtype command,</i><br>
><i> > +		struct gigabyte_wmi_args *args, struct acpi_buffer *out)</i><br>
><i> > +{</i><br>
><i> > +	const struct acpi_buffer in = {</i><br>
><i> > +		.length = sizeof(*args),</i><br>
><i> > +		.pointer = args,</i><br>
><i> > +	};</i><br>
><i> > +</i><br>
><i> > +	acpi_status ret = wmi_evaluate_method(GIGABYTE_WMI_GUID, 0x0, command, &in, out);</i><br>
><i> </i><br>
><i> Ideally, you'd use the WMI device that was passed to the probe method to do the query</i><br>
><i> using `wmidev_evaluate_method()`. You can pass the WMI device pointer</i><br>
><i> to `devm_hwmon_device_register_with_info()` in the `drvdata` argument,</i><br>
><i> then in the ->read() callback you can retrieve it:</i><br>
><i> </i><br>
><i>   static int gigabyte_wmi_hwmon_read(struct device *dev, ...)</i><br>
><i>   {</i><br>
><i>     struct wmi_device *wdev = dev_get_drvdata(dev);</i><br>
><i> </i><br>
><i> and then you can pass that to the other functions.</i><br>
<br>
Done.<br>
<br>
><i> > +	if (ret == AE_OK) {</i><br>
><i> > +		return 0;</i><br>
><i> > +	} else {</i><br>
><i> > +		return -EIO;</i><br>
><i> > +	};</i><br>
><i> </i><br>
><i> The `;` is not needed. And please use `ACPI_FAILURE()` or `ACPI_SUCCESS()`</i><br>
><i> to check the returned value. For example:</i><br>
><i> </i><br>
><i>   acpi_status ret = ...;</i><br>
><i>   if (ACPI_FAILURE(ret))</i><br>
><i>     return -EIO;</i><br>
><i> </i><br>
><i>   return 0;</i><br>
<br>
Done.<br>
<br>
><i> > +}</i><br>
><i> > +</i><br>
><i> > +static int gigabyte_wmi_query_integer(enum gigabyte_wmi_commandtype command,</i><br>
><i> > +		struct gigabyte_wmi_args *args, u64 *res)</i><br>
><i> > +{</i><br>
><i> > +	union acpi_object *obj;</i><br>
><i> > +	struct acpi_buffer result = { ACPI_ALLOCATE_BUFFER, NULL };</i><br>
><i> > +	int ret;</i><br>
><i> > +</i><br>
><i> > +	ret = gigabyte_wmi_perform_query(command, args, &result);</i><br>
><i> > +	if (ret) {</i><br>
><i> > +		goto out;</i><br>
><i> </i><br>
><i> I believe if this branch is taken, no buffer is allocated (due to the failure),</i><br>
><i> so you can just `return ret;` here and do away with the goto completely - if I'm not mistaken.</i><br>
<br>
Done.<br>
<br>
><i> > +static const struct hwmon_channel_info *gigabyte_wmi_hwmon_info[] = {</i><br>
><i> > +	HWMON_CHANNEL_INFO(temp,</i><br>
><i> > +			HWMON_T_INPUT,</i><br>
><i> > +			HWMON_T_INPUT,</i><br>
><i> > +			HWMON_T_INPUT,</i><br>
><i> > +			HWMON_T_INPUT,</i><br>
><i> > +			HWMON_T_INPUT,</i><br>
><i> > +			HWMON_T_INPUT),</i><br>
><i> > +	NULL,</i><br>
><i>             ^</i><br>
><i> Minor thing: usually commas after sentinel values are omitted.</i><br>
<br>
Done.<br>
<br>
><i> > +static const struct wmi_device_id gigabyte_wmi_id_table[] = {</i><br>
><i> > +	{ GIGABYTE_WMI_GUID, NULL },</i><br>
><i> > +	{ },</i><br>
><i>            ^</i><br>
><i> Same here.</i><br>
<br>
Done.<br>
<br>
><i> </i><br>
><i> > +};</i><br>
><i> > +</i><br>
><i> > +static struct wmi_driver gigabyte_wmi_driver = {</i><br>
><i> > +	.driver = {</i><br>
><i> > +		.name = "gigabyte-wmi",</i><br>
><i> > +	},</i><br>
><i> > +	.id_table = gigabyte_wmi_id_table,</i><br>
><i> > +	.probe = gigabyte_wmi_probe,</i><br>
><i> > +};</i><br>
><i> > +module_wmi_driver(gigabyte_wmi_driver);</i><br>
><i> > +</i><br>
><i> > +MODULE_DEVICE_TABLE(wmi, gigabyte_wmi_id_table);</i><br>
><i> > +MODULE_AUTHOR("Thomas Weißschuh <thomas@xxxxxxxxxxxxxx>");</i><br>
><i> > +MODULE_DESCRIPTION("Gigabyte Temperature WMI Driver");</i><br>
><i> </i><br>
><i> It's a very minor thing, but could you please</i><br>
><i> synchronize this description with the Kconfig?</i><br>
<br>
Of course.<br>
<br>
Thanks again for the review!<br>
<br>
Thomas<br>
<br>
<br>


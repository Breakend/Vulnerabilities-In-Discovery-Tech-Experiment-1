Use the 'success' and 'aborted' afs_operations_ops methods and add a<br>
'failed' method to handle the completion of an AFS.FetchData,<br>
AFS.FetchData64 or YFS.FetchData64 RPC operation rather than directly<br>
calling the done func pointed to by the afs_read struct from the call<br>
delivery handler.<br>
<br>
This means the done function will be called back on error also, not just on<br>
successful completion.<br>
<br>
This allows motion towards asynchronous data reception on data fetch calls<br>
and allows any error to be handed off to the fscache read helper in the<br>
same place as a successful completion.<br>
<br>
Signed-off-by: David Howells <dhowells@xxxxxxxxxx><br>
cc: linux-afs@xxxxxxxxxxxxxxxxxxx<br>
cc: linux-cachefs@xxxxxxxxxx<br>
cc: linux-fsdevel@xxxxxxxxxxxxxxx<br>
Link: <a  rel="nofollow" href="https://lore.kernel.org/r/160588541471.3465195.8807019223378490810.stgit@xxxxxxxxxxxxxxxxxxxxxx/">https://lore.kernel.org/r/160588541471.3465195.8807019223378490810.stgit@xxxxxxxxxxxxxxxxxxxxxx/</a> # rfc<br>
Link: <a  rel="nofollow" href="https://lore.kernel.org/r/161118157260.1232039.6549085372718234792.stgit@xxxxxxxxxxxxxxxxxxxxxx/">https://lore.kernel.org/r/161118157260.1232039.6549085372718234792.stgit@xxxxxxxxxxxxxxxxxxxxxx/</a> # rfc<br>
Link: <a  rel="nofollow" href="https://lore.kernel.org/r/161161052647.2537118.12922380836599003659.stgit@xxxxxxxxxxxxxxxxxxxxxx/">https://lore.kernel.org/r/161161052647.2537118.12922380836599003659.stgit@xxxxxxxxxxxxxxxxxxxxxx/</a> # v2<br>
Link: <a  rel="nofollow" href="https://lore.kernel.org/r/161340417106.1303470.3502017303898569631.stgit@xxxxxxxxxxxxxxxxxxxxxx/">https://lore.kernel.org/r/161340417106.1303470.3502017303898569631.stgit@xxxxxxxxxxxxxxxxxxxxxx/</a> # v3<br>
Link: <a  rel="nofollow" href="https://lore.kernel.org/r/161539560673.286939.391310781674212229.stgit@xxxxxxxxxxxxxxxxxxxxxx/">https://lore.kernel.org/r/161539560673.286939.391310781674212229.stgit@xxxxxxxxxxxxxxxxxxxxxx/</a> # v4<br>
Link: <a  rel="nofollow" href="https://lore.kernel.org/r/161653816367.2770958.5856904574822446404.stgit@xxxxxxxxxxxxxxxxxxxxxx/">https://lore.kernel.org/r/161653816367.2770958.5856904574822446404.stgit@xxxxxxxxxxxxxxxxxxxxxx/</a> # v5<br>
---<br>
<br>
 fs/afs/file.c         |   15 +++++++++++++++<br>
 fs/afs/fs_operation.c |    4 +++-<br>
 fs/afs/fsclient.c     |    3 ---<br>
 fs/afs/internal.h     |    1 +<br>
 fs/afs/yfsclient.c    |    3 ---<br>
 5 files changed, 19 insertions(+), 7 deletions(-)<br>
<br>
diff --git a/fs/afs/file.c b/fs/afs/file.c<br>
index edf21c8708a3..2db810467d3f 100644<br>
--- a/fs/afs/file.c<br>
+++ b/fs/afs/file.c<br>
@@ -254,6 +254,19 @@ void afs_put_read(struct afs_read *req)<br>
 	}<br>
 }<br>
 <br>
+static void afs_fetch_data_notify(struct afs_operation *op)<br>
+{<br>
+	struct afs_read *req = op->fetch.req;<br>
+	int error = op->error;<br>
+<br>
+	if (error == -ECONNABORTED)<br>
+		error = afs_abort_to_error(op->ac.abort_code);<br>
+	req->error = error;<br>
+<br>
+	if (req->done)<br>
+		req->done(req);<br>
+}<br>
+<br>
 static void afs_fetch_data_success(struct afs_operation *op)<br>
 {<br>
 	struct afs_vnode *vnode = op->file[0].vnode;<br>
@@ -262,6 +275,7 @@ static void afs_fetch_data_success(struct afs_operation *op)<br>
 	afs_vnode_commit_status(op, &op->file[0]);<br>
 	afs_stat_v(vnode, n_fetches);<br>
 	atomic_long_add(op->fetch.req->actual_len, &op->net->n_fetch_bytes);<br>
+	afs_fetch_data_notify(op);<br>
 }<br>
 <br>
 static void afs_fetch_data_put(struct afs_operation *op)<br>
@@ -275,6 +289,7 @@ static const struct afs_operation_ops afs_fetch_data_operation = {<br>
 	.issue_yfs_rpc	= yfs_fs_fetch_data,<br>
 	.success	= afs_fetch_data_success,<br>
 	.aborted	= afs_check_for_remote_deletion,<br>
+	.failed		= afs_fetch_data_notify,<br>
 	.put		= afs_fetch_data_put,<br>
 };<br>
 <br>
diff --git a/fs/afs/fs_operation.c b/fs/afs/fs_operation.c<br>
index 71c58723763d..2cb0951acca6 100644<br>
--- a/fs/afs/fs_operation.c<br>
+++ b/fs/afs/fs_operation.c<br>
@@ -198,8 +198,10 @@ void afs_wait_for_operation(struct afs_operation *op)<br>
 	case -ECONNABORTED:<br>
 		if (op->ops->aborted)<br>
 			op->ops->aborted(op);<br>
-		break;<br>
+		fallthrough;<br>
 	default:<br>
+		if (op->ops->failed)<br>
+			op->ops->failed(op);<br>
 		break;<br>
 	}<br>
 <br>
diff --git a/fs/afs/fsclient.c b/fs/afs/fsclient.c<br>
index 31e6b3635541..5e34f4dbd385 100644<br>
--- a/fs/afs/fsclient.c<br>
+++ b/fs/afs/fsclient.c<br>
@@ -392,9 +392,6 @@ static int afs_deliver_fs_fetch_data(struct afs_call *call)<br>
 		break;<br>
 	}<br>
 <br>
-	if (req->done)<br>
-		req->done(req);<br>
-<br>
 	_leave(" = 0 [done]");<br>
 	return 0;<br>
 }<br>
diff --git a/fs/afs/internal.h b/fs/afs/internal.h<br>
index 9629b6430a52..ee283e3ebc4d 100644<br>
--- a/fs/afs/internal.h<br>
+++ b/fs/afs/internal.h<br>
@@ -742,6 +742,7 @@ struct afs_operation_ops {<br>
 	void (*issue_yfs_rpc)(struct afs_operation *op);<br>
 	void (*success)(struct afs_operation *op);<br>
 	void (*aborted)(struct afs_operation *op);<br>
+	void (*failed)(struct afs_operation *op);<br>
 	void (*edit_dir)(struct afs_operation *op);<br>
 	void (*put)(struct afs_operation *op);<br>
 };<br>
diff --git a/fs/afs/yfsclient.c b/fs/afs/yfsclient.c<br>
index 363d6dd276c0..2b35cba8ad62 100644<br>
--- a/fs/afs/yfsclient.c<br>
+++ b/fs/afs/yfsclient.c<br>
@@ -449,9 +449,6 @@ static int yfs_deliver_fs_fetch_data64(struct afs_call *call)<br>
 		break;<br>
 	}<br>
 <br>
-	if (req->done)<br>
-		req->done(req);<br>
-<br>
 	_leave(" = 0 [done]");<br>
 	return 0;<br>
 }<br>
<br>
<br>
<br>


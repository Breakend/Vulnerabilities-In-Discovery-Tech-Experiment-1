Add interface documentation for the netfs helper library.<br>
<br>
Signed-off-by: David Howells <dhowells@xxxxxxxxxx><br>
cc: linux-mm@xxxxxxxxx<br>
cc: linux-cachefs@xxxxxxxxxx<br>
cc: linux-afs@xxxxxxxxxxxxxxxxxxx<br>
cc: linux-nfs@xxxxxxxxxxxxxxx<br>
cc: linux-cifs@xxxxxxxxxxxxxxx<br>
cc: ceph-devel@xxxxxxxxxxxxxxx<br>
cc: v9fs-developer@xxxxxxxxxxxxxxxxxxxxx<br>
cc: linux-fsdevel@xxxxxxxxxxxxxxx<br>
Link: <a  rel="nofollow" href="https://lore.kernel.org/r/161539533275.286939.6246011228676840978.stgit@xxxxxxxxxxxxxxxxxxxxxx/">https://lore.kernel.org/r/161539533275.286939.6246011228676840978.stgit@xxxxxxxxxxxxxxxxxxxxxx/</a> # v4<br>
Link: <a  rel="nofollow" href="https://lore.kernel.org/r/161653791767.2770958.2012814194145060913.stgit@xxxxxxxxxxxxxxxxxxxxxx/">https://lore.kernel.org/r/161653791767.2770958.2012814194145060913.stgit@xxxxxxxxxxxxxxxxxxxxxx/</a> # v5<br>
---<br>
<br>
 Documentation/filesystems/index.rst         |    1 <br>
 Documentation/filesystems/netfs_library.rst |  526 +++++++++++++++++++++++++++<br>
 2 files changed, 527 insertions(+)<br>
 create mode 100644 Documentation/filesystems/netfs_library.rst<br>
<br>
diff --git a/Documentation/filesystems/index.rst b/Documentation/filesystems/index.rst<br>
index 1f76b1cb3348..d4853cb919d2 100644<br>
--- a/Documentation/filesystems/index.rst<br>
+++ b/Documentation/filesystems/index.rst<br>
@@ -53,6 +53,7 @@ filesystem implementations.<br>
    journalling<br>
    fscrypt<br>
    fsverity<br>
+   netfs_library<br>
 <br>
 Filesystems<br>
 ===========<br>
diff --git a/Documentation/filesystems/netfs_library.rst b/Documentation/filesystems/netfs_library.rst<br>
new file mode 100644<br>
index 000000000000..57a641847818<br>
--- /dev/null<br>
+++ b/Documentation/filesystems/netfs_library.rst<br>
@@ -0,0 +1,526 @@<br>
+.. SPDX-License-Identifier: GPL-2.0<br>
+<br>
+=================================<br>
+NETWORK FILESYSTEM HELPER LIBRARY<br>
+=================================<br>
+<br>
+.. Contents:<br>
+<br>
+ - Overview.<br>
+ - Buffered read helpers.<br>
+   - Read helper functions.<br>
+   - Read helper structures.<br>
+   - Read helper operations.<br>
+   - Read helper procedure.<br>
+   - Read helper cache API.<br>
+<br>
+<br>
+Overview<br>
+========<br>
+<br>
+The network filesystem helper library is a set of functions designed to aid a<br>
+network filesystem in implementing VM/VFS operations.  For the moment, that<br>
+just includes turning various VM buffered read operations into requests to read<br>
+from the server.  The helper library, however, can also interpose other<br>
+services, such as local caching or local data encryption.<br>
+<br>
+Note that the library module doesn't link against local caching directly, so<br>
+access must be provided by the netfs.<br>
+<br>
+<br>
+Buffered Read Helpers<br>
+=====================<br>
+<br>
+The library provides a set of read helpers that handle the ->readpage(),<br>
+->readahead() and much of the ->write_begin() VM operations and translate them<br>
+into a common call framework.<br>
+<br>
+The following services are provided:<br>
+<br>
+ * Handles transparent huge pages (THPs).<br>
+<br>
+ * Insulates the netfs from VM interface changes.<br>
+<br>
+ * Allows the netfs to arbitrarily split reads up into pieces, even ones that<br>
+   don't match page sizes or page alignments and that may cross pages.<br>
+<br>
+ * Allows the netfs to expand a readahead request in both directions to meet<br>
+   its needs.<br>
+<br>
+ * Allows the netfs to partially fulfil a read, which will then be resubmitted.<br>
+<br>
+ * Handles local caching, allowing cached data and server-read data to be<br>
+   interleaved for a single request.<br>
+<br>
+ * Handles clearing of bufferage that aren't on the server.<br>
+<br>
+ * Handle retrying of reads that failed, switching reads from the cache to the<br>
+   server as necessary.<br>
+<br>
+ * In the future, this is a place that other services can be performed, such as<br>
+   local encryption of data to be stored remotely or in the cache.<br>
+<br>
+From the network filesystem, the helpers require a table of operations.  This<br>
+includes a mandatory method to issue a read operation along with a number of<br>
+optional methods.<br>
+<br>
+<br>
+Read Helper Functions<br>
+---------------------<br>
+<br>
+Three read helpers are provided::<br>
+<br>
+ * void netfs_readahead(struct readahead_control *ractl,<br>
+			const struct netfs_read_request_ops *ops,<br>
+			void *netfs_priv);``<br>
+ * int netfs_readpage(struct file *file,<br>
+		      struct page *page,<br>
+		      const struct netfs_read_request_ops *ops,<br>
+		      void *netfs_priv);<br>
+ * int netfs_write_begin(struct file *file,<br>
+			 struct address_space *mapping,<br>
+			 loff_t pos,<br>
+			 unsigned int len,<br>
+			 unsigned int flags,<br>
+			 struct page **_page,<br>
+			 void **_fsdata,<br>
+			 const struct netfs_read_request_ops *ops,<br>
+			 void *netfs_priv);<br>
+<br>
+Each corresponds to a VM operation, with the addition of a couple of parameters<br>
+for the use of the read helpers:<br>
+<br>
+ * ``ops``<br>
+<br>
+   A table of operations through which the helpers can talk to the filesystem.<br>
+<br>
+ * ``netfs_priv``<br>
+<br>
+   Filesystem private data (can be NULL).<br>
+<br>
+Both of these values will be stored into the read request structure.<br>
+<br>
+For ->readahead() and ->readpage(), the network filesystem should just jump<br>
+into the corresponding read helper; whereas for ->write_begin(), it may be a<br>
+little more complicated as the network filesystem might want to flush<br>
+conflicting writes or track dirty data and needs to put the acquired page if an<br>
+error occurs after calling the helper.<br>
+<br>
+The helpers manage the read request, calling back into the network filesystem<br>
+through the suppplied table of operations.  Waits will be performed as<br>
+necessary before returning for helpers that are meant to be synchronous.<br>
+<br>
+If an error occurs and netfs_priv is non-NULL, ops->cleanup() will be called to<br>
+deal with it.  If some parts of the request are in progress when an error<br>
+occurs, the request will get partially completed if sufficient data is read.<br>
+<br>
+Additionally, there is::<br>
+<br>
+  * void netfs_subreq_terminated(struct netfs_read_subrequest *subreq,<br>
+				 ssize_t transferred_or_error,<br>
+				 bool was_async);<br>
+<br>
+which should be called to complete a read subrequest.  This is given the number<br>
+of bytes transferred or a negative error code, plus a flag indicating whether<br>
+the operation was asynchronous (ie. whether the follow-on processing can be<br>
+done in the current context, given this may involve sleeping).<br>
+<br>
+<br>
+Read Helper Structures<br>
+----------------------<br>
+<br>
+The read helpers make use of a couple of structures to maintain the state of<br>
+the read.  The first is a structure that manages a read request as a whole::<br>
+<br>
+	struct netfs_read_request {<br>
+		struct inode		*inode;<br>
+		struct address_space	*mapping;<br>
+		struct netfs_cache_resources cache_resources;<br>
+		void			*netfs_priv;<br>
+		loff_t			start;<br>
+		size_t			len;<br>
+		loff_t			i_size;<br>
+		const struct netfs_read_request_ops *netfs_ops;<br>
+		unsigned int		debug_id;<br>
+		...<br>
+	};<br>
+<br>
+The above fields are the ones the netfs can use.  They are:<br>
+<br>
+ * ``inode``<br>
+ * ``mapping``<br>
+<br>
+   The inode and the address space of the file being read from.  The mapping<br>
+   may or may not point to inode->i_data.<br>
+<br>
+ * ``cache_resources``<br>
+<br>
+   Resources for the local cache to use, if present.<br>
+<br>
+ * ``netfs_priv``<br>
+<br>
+   The network filesystem's private data.  The value for this can be passed in<br>
+   to the helper functions or set during the request.  The ->cleanup() op will<br>
+   be called if this is non-NULL at the end.<br>
+<br>
+ * ``start``<br>
+ * ``len``<br>
+<br>
+   The file position of the start of the read request and the length.  These<br>
+   may be altered by the ->expand_readahead() op.<br>
+<br>
+ * ``i_size``<br>
+<br>
+   The size of the file at the start of the request.<br>
+<br>
+ * ``netfs_ops``<br>
+<br>
+   A pointer to the operation table.  The value for this is passed into the<br>
+   helper functions.<br>
+<br>
+ * ``debug_id``<br>
+<br>
+   A number allocated to this operation that can be displayed in trace lines<br>
+   for reference.<br>
+<br>
+<br>
+The second structure is used to manage individual slices of the overall read<br>
+request::<br>
+<br>
+	struct netfs_read_subrequest {<br>
+		struct netfs_read_request *rreq;<br>
+		loff_t			start;<br>
+		size_t			len;<br>
+		size_t			transferred;<br>
+		unsigned long		flags;<br>
+		unsigned short		debug_index;<br>
+		...<br>
+	};<br>
+<br>
+Each subrequest is expected to access a single source, though the helpers will<br>
+handle falling back from one source type to another.  The members are:<br>
+<br>
+ * ``rreq``<br>
+<br>
+   A pointer to the read request.<br>
+<br>
+ * ``start``<br>
+ * ``len``<br>
+<br>
+   The file position of the start of this slice of the read request and the<br>
+   length.<br>
+<br>
+ * ``transferred``<br>
+<br>
+   The amount of data transferred so far of the length of this slice.  The<br>
+   network filesystem or cache should start the operation this far into the<br>
+   slice.  If a short read occurs, the helpers will call again, having updated<br>
+   this to reflect the amount read so far.<br>
+<br>
+ * ``flags``<br>
+<br>
+   Flags pertaining to the read.  There are two of interest to the filesystem<br>
+   or cache:<br>
+<br>
+   * ``NETFS_SREQ_CLEAR_TAIL``<br>
+<br>
+     This can be set to indicate that the remainder of the slice, from<br>
+     transferred to len, should be cleared.<br>
+<br>
+   * ``NETFS_SREQ_SEEK_DATA_READ``<br>
+<br>
+     This is a hint to the cache that it might want to try skipping ahead to<br>
+     the next data (ie. using SEEK_DATA).<br>
+<br>
+ * ``debug_index``<br>
+<br>
+   A number allocated to this slice that can be displayed in trace lines for<br>
+   reference.<br>
+<br>
+<br>
+Read Helper Operations<br>
+----------------------<br>
+<br>
+The network filesystem must provide the read helpers with a table of operations<br>
+through which it can issue requests and negotiate::<br>
+<br>
+	struct netfs_read_request_ops {<br>
+		void (*init_rreq)(struct netfs_read_request *rreq, struct file *file);<br>
+		bool (*is_cache_enabled)(struct inode *inode);<br>
+		int (*begin_cache_operation)(struct netfs_read_request *rreq);<br>
+		void (*expand_readahead)(struct netfs_read_request *rreq);<br>
+		bool (*clamp_length)(struct netfs_read_subrequest *subreq);<br>
+		void (*issue_op)(struct netfs_read_subrequest *subreq);<br>
+		bool (*is_still_valid)(struct netfs_read_request *rreq);<br>
+		int (*check_write_begin)(struct file *file, loff_t pos, unsigned len,<br>
+					 struct page *page, void **_fsdata);<br>
+		void (*done)(struct netfs_read_request *rreq);<br>
+		void (*cleanup)(struct address_space *mapping, void *netfs_priv);<br>
+	};<br>
+<br>
+The operations are as follows:<br>
+<br>
+ * ``init_rreq()``<br>
+<br>
+   [Optional] This is called to initialise the request structure.  It is given<br>
+   the file for reference and can modify the ->netfs_priv value.<br>
+<br>
+ * ``is_cache_enabled()``<br>
+<br>
+   [Required] This is called by netfs_write_begin() to ask if the file is being<br>
+   cached.  It should return true if it is being cached and false otherwise.<br>
+<br>
+ * ``begin_cache_operation()``<br>
+<br>
+   [Optional] This is called to ask the network filesystem to call into the<br>
+   cache (if present) to initialise the caching state for this read.  The netfs<br>
+   library module cannot access the cache directly, so the cache should call<br>
+   something like fscache_begin_read_operation() to do this.<br>
+<br>
+   The cache gets to store its state in ->cache_resources and must set a table<br>
+   of operations of its own there (though of a different type).<br>
+<br>
+   This should return 0 on success and an error code otherwise.  If an error is<br>
+   reported, the operation may proceed anyway, just without local caching (only<br>
+   out of memory and interruption errors cause failure here).<br>
+<br>
+ * ``expand_readahead()``<br>
+<br>
+   [Optional] This is called to allow the filesystem to expand the size of a<br>
+   readahead read request.  The filesystem gets to expand the request in both<br>
+   directions, though it's not permitted to reduce it as the numbers may<br>
+   represent an allocation already made.  If local caching is enabled, it gets<br>
+   to expand the request first.<br>
+<br>
+   Expansion is communicated by changing ->start and ->len in the request<br>
+   structure.  Note that if any change is made, ->len must be increased by at<br>
+   least as much as ->start is reduced.<br>
+<br>
+ * ``clamp_length()``<br>
+<br>
+   [Optional] This is called to allow the filesystem to reduce the size of a<br>
+   subrequest.  The filesystem can use this, for example, to chop up a request<br>
+   that has to be split across multiple servers or to put multiple reads in<br>
+   flight.<br>
+<br>
+   This should return 0 on success and an error code on error.<br>
+<br>
+ * ``issue_op()``<br>
+<br>
+   [Required] The helpers use this to dispatch a subrequest to the server for<br>
+   reading.  In the subrequest, ->start, ->len and ->transferred indicate what<br>
+   data should be read from the server.<br>
+<br>
+   There is no return value; the netfs_subreq_terminated() function should be<br>
+   called to indicate whether or not the operation succeeded and how much data<br>
+   it transferred.  The filesystem also should not deal with setting pages<br>
+   uptodate, unlocking them or dropping their refs - the helpers need to deal<br>
+   with this as they have to coordinate with copying to the local cache.<br>
+<br>
+   Note that the helpers have the pages locked, but not pinned.  It is possible<br>
+   to use the ITER_XARRAY iov iterator to refer to the range of the inode that<br>
+   is being operated upon without the need to allocate large bvec tables.<br>
+<br>
+ * ``is_still_valid()``<br>
+<br>
+   [Optional] This is called to find out if the data just read from the local<br>
+   cache is still valid.  It should return true if it is still valid and false<br>
+   if not.  If it's not still valid, it will be reread from the server.<br>
+<br>
+ * ``check_write_begin()``<br>
+<br>
+   [Optional] This is called from the netfs_write_begin() helper once it has<br>
+   allocated/grabbed the page to be modified to allow the filesystem to flush<br>
+   conflicting state before allowing it to be modified.<br>
+<br>
+   It should return 0 if everything is now fine, -EAGAIN if the page should be<br>
+   regrabbed and any other error code to abort the operation.<br>
+<br>
+ * ``done``<br>
+<br>
+   [Optional] This is called after the pages in the request have all been<br>
+   unlocked (and marked uptodate if applicable).<br>
+<br>
+ * ``cleanup``<br>
+<br>
+   [Optional] This is called as the request is being deallocated so that the<br>
+   filesystem can clean up ->netfs_priv.<br>
+<br>
+<br>
+<br>
+Read Helper Procedure<br>
+---------------------<br>
+<br>
+The read helpers work by the following general procedure:<br>
+<br>
+ * Set up the request.<br>
+<br>
+ * For readahead, allow the local cache and then the network filesystem to<br>
+   propose expansions to the read request.  This is then proposed to the VM.<br>
+   If the VM cannot fully perform the expansion, a partially expanded read will<br>
+   be performed, though this may not get written to the cache in its entirety.<br>
+<br>
+ * Loop around slicing chunks off of the request to form subrequests:<br>
+<br>
+   * If a local cache is present, it gets to do the slicing, otherwise the<br>
+     helpers just try to generate maximal slices.<br>
+<br>
+   * The network filesystem gets to clamp the size of each slice if it is to be<br>
+     the source.  This allows rsize and chunking to be implemented.<br>
+<br>
+   * The helpers issue a read from the cache or a read from the server or just<br>
+     clears the slice as appropriate.<br>
+<br>
+   * The next slice begins at the end of the last one.<br>
+<br>
+   * As slices finish being read, they terminate.<br>
+<br>
+ * When all the subrequests have terminated, the subrequests are assessed and<br>
+   any that are short or have failed are reissued:<br>
+<br>
+   * Failed cache requests are issued against the server instead.<br>
+<br>
+   * Failed server requests just fail.<br>
+<br>
+   * Short reads against either source will be reissued against that source<br>
+     provided they have transferred some more data:<br>
+<br>
+     * The cache may need to skip holes that it can't do DIO from.<br>
+<br>
+     * If NETFS_SREQ_CLEAR_TAIL was set, a short read will be cleared to the<br>
+       end of the slice instead of reissuing.<br>
+<br>
+ * Once the data is read, the pages that have been fully read/cleared:<br>
+<br>
+   * Will be marked uptodate.<br>
+<br>
+   * If a cache is present, will be marked with PG_fscache.<br>
+<br>
+   * Unlocked<br>
+<br>
+ * Any pages that need writing to the cache will then have DIO writes issued.<br>
+<br>
+ * Synchronous operations will wait for reading to be complete.<br>
+<br>
+ * Writes to the cache will proceed asynchronously and the pages will have the<br>
+   PG_fscache mark removed when that completes.<br>
+<br>
+ * The request structures will be cleaned up when everything has completed.<br>
+<br>
+<br>
+Read Helper Cache API<br>
+---------------------<br>
+<br>
+When implementing a local cache to be used by the read helpers, two things are<br>
+required: some way for the network filesystem to initialise the caching for a<br>
+read request and a table of operations for the helpers to call.<br>
+<br>
+The network filesystem's ->begin_cache_operation() method is called to set up a<br>
+cache and this must call into the cache to do the work.  If using fscache, for<br>
+example, the cache would call::<br>
+<br>
+	int fscache_begin_read_operation(struct netfs_read_request *rreq,<br>
+					 struct fscache_cookie *cookie);<br>
+<br>
+passing in the request pointer and the cookie corresponding to the file.<br>
+<br>
+The netfs_read_request object contains a place for the cache to hang its<br>
+state::<br>
+<br>
+	struct netfs_cache_resources {<br>
+		const struct netfs_cache_ops	*ops;<br>
+		void				*cache_priv;<br>
+		void				*cache_priv2;<br>
+	};<br>
+<br>
+This contains an operations table pointer and two private pointers.  The<br>
+operation table looks like the following::<br>
+<br>
+	struct netfs_cache_ops {<br>
+		void (*end_operation)(struct netfs_cache_resources *cres);<br>
+<br>
+		void (*expand_readahead)(struct netfs_cache_resources *cres,<br>
+					 loff_t *_start, size_t *_len, loff_t i_size);<br>
+<br>
+		enum netfs_read_source (*prepare_read)(struct netfs_read_subrequest *subreq,<br>
+						       loff_t i_size);<br>
+<br>
+		int (*read)(struct netfs_cache_resources *cres,<br>
+			    loff_t start_pos,<br>
+			    struct iov_iter *iter,<br>
+			    bool seek_data,<br>
+			    netfs_io_terminated_t term_func,<br>
+			    void *term_func_priv);<br>
+<br>
+		int (*write)(struct netfs_cache_resources *cres,<br>
+			     loff_t start_pos,<br>
+			     struct iov_iter *iter,<br>
+			     netfs_io_terminated_t term_func,<br>
+			     void *term_func_priv);<br>
+	};<br>
+<br>
+With a termination handler function pointer::<br>
+<br>
+	typedef void (*netfs_io_terminated_t)(void *priv,<br>
+					      ssize_t transferred_or_error,<br>
+					      bool was_async);<br>
+<br>
+The methods defined in the table are:<br>
+<br>
+ * ``end_operation()``<br>
+<br>
+   [Required] Called to clean up the resources at the end of the read request.<br>
+<br>
+ * ``expand_readahead()``<br>
+<br>
+   [Optional] Called at the beginning of a netfs_readahead() operation to allow<br>
+   the cache to expand a request in either direction.  This allows the cache to<br>
+   size the request appropriately for the cache granularity.<br>
+<br>
+   The function is passed poiners to the start and length in its parameters,<br>
+   plus the size of the file for reference, and adjusts the start and length<br>
+   appropriately.  It should return one of:<br>
+<br>
+   * ``NETFS_FILL_WITH_ZEROES``<br>
+   * ``NETFS_DOWNLOAD_FROM_SERVER``<br>
+   * ``NETFS_READ_FROM_CACHE``<br>
+   * ``NETFS_INVALID_READ``<br>
+<br>
+   to indicate whether the slice should just be cleared or whether it should be<br>
+   downloaded from the server or read from the cache - or whether slicing<br>
+   should be given up at the current point.<br>
+<br>
+ * ``prepare_read()``<br>
+<br>
+   [Required] Called to configure the next slice of a request.  ->start and<br>
+   ->len in the subrequest indicate where and how big the next slice can be;<br>
+   the cache gets to reduce the length to match its granularity requirements.<br>
+<br>
+ * ``read()``<br>
+<br>
+   [Required] Called to read from the cache.  The start file offset is given<br>
+   along with an iterator to read to, which gives the length also.  It can be<br>
+   given a hint requesting that it seek forward from that start position for<br>
+   data.<br>
+<br>
+   Also provided is a pointer to a termination handler function and private<br>
+   data to pass to that function.  The termination function should be called<br>
+   with the number of bytes transferred or an error code, plus a flag<br>
+   indicating whether the termination is definitely happening in the caller's<br>
+   context.<br>
+<br>
+ * ``write()``<br>
+<br>
+   [Required] Called to write to the cache.  The start file offset is given<br>
+   along with an iterator to write from, which gives the length also.<br>
+<br>
+   Also provided is a pointer to a termination handler function and private<br>
+   data to pass to that function.  The termination function should be called<br>
+   with the number of bytes transferred or an error code, plus a flag<br>
+   indicating whether the termination is definitely happening in the caller's<br>
+   context.<br>
+<br>
+Note that these methods are passed a pointer to the cache resource structure,<br>
+not the read request structure as they could be used in other situations where<br>
+there isn't a read request structure as well, such as writing dirty data to the<br>
+cache.<br>
<br>
<br>
<br>


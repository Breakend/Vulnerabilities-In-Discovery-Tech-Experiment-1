On Wed, Mar 24, 2021 at 11:44:20AM -0500, Brijesh Singh wrote:<br>
><i> @@ -63,6 +63,10 @@ struct __packed snp_page_state_change {</i><br>
><i>  #define GHCB_REGISTER_GPA_RESP	0x013UL</i><br>
><i>  #define		GHCB_REGISTER_GPA_RESP_VAL(val)		((val) >> 12)</i><br>
><i>  </i><br>
><i> +/* Macro to convert the x86 page level to the RMP level and vice versa */</i><br>
><i> +#define X86_RMP_PG_LEVEL(level)	(((level) == PG_LEVEL_4K) ? RMP_PG_SIZE_4K : RMP_PG_SIZE_2M)</i><br>
><i> +#define RMP_X86_PG_LEVEL(level)	(((level) == RMP_PG_SIZE_4K) ? PG_LEVEL_4K : PG_LEVEL_2M)</i><br>
<br>
Please add those with the patch which uses them for the first time.<br>
<br>
Also, it seems to me the names should be<br>
<br>
X86_TO_RMP_PG_LEVEL<br>
RMP_TO_X86_PG_LEVEL<br>
<br>
...<br>
<br>
><i> @@ -56,3 +56,108 @@ void sev_snp_register_ghcb(unsigned long paddr)</i><br>
><i>  	/* Restore the GHCB MSR value */</i><br>
><i>  	sev_es_wr_ghcb_msr(old);</i><br>
><i>  }</i><br>
><i> +</i><br>
><i> +static void sev_snp_issue_pvalidate(unsigned long vaddr, unsigned int npages, bool validate)</i><br>
<br>
pvalidate_pages() I guess.<br>
<br>
><i> +{</i><br>
><i> +	unsigned long eflags, vaddr_end, vaddr_next;</i><br>
><i> +	int rc;</i><br>
><i> +</i><br>
><i> +	vaddr = vaddr & PAGE_MASK;</i><br>
><i> +	vaddr_end = vaddr + (npages << PAGE_SHIFT);</i><br>
><i> +</i><br>
><i> +	for (; vaddr < vaddr_end; vaddr = vaddr_next) {</i><br>
<br>
Yuck, that vaddr_next gets initialized at the end of the loop. How about<br>
using a while loop here instead?<br>
<br>
	while (vaddr < vaddr_end) {<br>
<br>
		...<br>
<br>
		vaddr += PAGE_SIZE;<br>
	}<br>
<br>
then you don't need vaddr_next at all. Ditto for all the other loops in<br>
this patch which iterate over pages.<br>
<br>
><i> +		rc = __pvalidate(vaddr, RMP_PG_SIZE_4K, validate, &eflags);</i><br>
<br>
So this function gets only 4K pages to pvalidate?<br>
<br>
><i> +</i><br>
<br>
^ Superfluous newline.<br>
<br>
><i> +		if (rc) {</i><br>
><i> +			pr_err("Failed to validate address 0x%lx ret %d\n", vaddr, rc);</i><br>
<br>
You can combine the pr_err and dump_stack() below into a WARN() here:<br>
<br>
		WARN(rc, ...);<br>
<br>
><i> +			goto e_fail;</i><br>
><i> +		}</i><br>
><i> +</i><br>
><i> +		/* Check for the double validation condition */</i><br>
><i> +		if (eflags & X86_EFLAGS_CF) {</i><br>
><i> +			pr_err("Double %salidation detected (address 0x%lx)\n",</i><br>
><i> +					validate ? "v" : "inv", vaddr);</i><br>
><i> +			goto e_fail;</i><br>
><i> +		}</i><br>
<br>
As before - this should be communicated by a special retval from<br>
__pvalidate().<br>
<br>
><i> +</i><br>
><i> +		vaddr_next = vaddr + PAGE_SIZE;</i><br>
><i> +	}</i><br>
><i> +</i><br>
><i> +	return;</i><br>
><i> +</i><br>
><i> +e_fail:</i><br>
><i> +	/* Dump stack for the debugging purpose */</i><br>
><i> +	dump_stack();</i><br>
><i> +</i><br>
><i> +	/* Ask to terminate the guest */</i><br>
><i> +	sev_es_terminate(GHCB_SEV_ES_REASON_GENERAL_REQUEST);</i><br>
<br>
Another termination reason to #define.<br>
<br>
><i> +}</i><br>
><i> +</i><br>
><i> +static void __init early_snp_set_page_state(unsigned long paddr, unsigned int npages, int op)</i><br>
><i> +{</i><br>
><i> +	unsigned long paddr_end, paddr_next;</i><br>
><i> +	u64 old, val;</i><br>
><i> +</i><br>
><i> +	paddr = paddr & PAGE_MASK;</i><br>
><i> +	paddr_end = paddr + (npages << PAGE_SHIFT);</i><br>
><i> +</i><br>
><i> +	/* save the old GHCB MSR */</i><br>
><i> +	old = sev_es_rd_ghcb_msr();</i><br>
><i> +</i><br>
><i> +	for (; paddr < paddr_end; paddr = paddr_next) {</i><br>
><i> +</i><br>
><i> +		/*</i><br>
><i> +		 * Use the MSR protocol VMGEXIT to request the page state change. We use the MSR</i><br>
><i> +		 * protocol VMGEXIT because in early boot we may not have the full GHCB setup</i><br>
><i> +		 * yet.</i><br>
><i> +		 */</i><br>
><i> +		sev_es_wr_ghcb_msr(GHCB_SNP_PAGE_STATE_REQ_GFN(paddr >> PAGE_SHIFT, op));</i><br>
><i> +		VMGEXIT();</i><br>
<br>
Yeah, I know we don't always strictly adhere to 80 columns but there's<br>
no real need not to fit that in 80 cols here so please shorten names and<br>
comments. Ditto for the rest.<br>
<br>
><i> +</i><br>
><i> +		val = sev_es_rd_ghcb_msr();</i><br>
><i> +</i><br>
><i> +		/* Read the response, if the page state change failed then terminate the guest. */</i><br>
><i> +		if (GHCB_SEV_GHCB_RESP_CODE(val) != GHCB_SNP_PAGE_STATE_CHANGE_RESP)</i><br>
><i> +			sev_es_terminate(GHCB_SEV_ES_REASON_GENERAL_REQUEST);</i><br>
<br>
if (...)<br>
	goto fail;<br>
<br>
and add that fail label at the end so that all the error handling path<br>
is out of the way.<br>
<br>
><i> +</i><br>
><i> +		if (GHCB_SNP_PAGE_STATE_RESP_VAL(val) != 0) {</i><br>
<br>
s/!= 0//<br>
<br>
><i> +			pr_err("Failed to change page state to '%s' paddr 0x%lx error 0x%llx\n",</i><br>
><i> +					op == SNP_PAGE_STATE_PRIVATE ? "private" : "shared",</i><br>
><i> +					paddr, GHCB_SNP_PAGE_STATE_RESP_VAL(val));</i><br>
><i> +</i><br>
><i> +			/* Dump stack for the debugging purpose */</i><br>
><i> +			dump_stack();</i><br>
<br>
WARN as above.<br>
<br>
><i> @@ -49,6 +50,27 @@ bool sev_enabled __section(".data");</i><br>
><i>  /* Buffer used for early in-place encryption by BSP, no locking needed */</i><br>
><i>  static char sme_early_buffer[PAGE_SIZE] __initdata __aligned(PAGE_SIZE);</i><br>
><i>  </i><br>
><i> +/*</i><br>
><i> + * When SNP is active, this routine changes the page state from private to shared before</i><br>
><i> + * copying the data from the source to destination and restore after the copy. This is required</i><br>
><i> + * because the source address is mapped as decrypted by the caller of the routine.</i><br>
><i> + */</i><br>
><i> +static inline void __init snp_aware_memcpy(void *dst, void *src, size_t sz,</i><br>
><i> +					   unsigned long paddr, bool dec)</i><br>
<br>
snp_memcpy() simply.<br>
<br>
><i> +{</i><br>
><i> +	unsigned long npages = PAGE_ALIGN(sz) >> PAGE_SHIFT;</i><br>
><i> +</i><br>
><i> +	/* If the paddr need to accessed decrypted, make the page shared before memcpy. */</i><br>
<br>
*needs*<br>
<br>
><i> +	if (sev_snp_active() && dec)</i><br>
<br>
Flip that test so that you don't have it twice in the code:<br>
<br>
	if (!sev_snp_active()) {<br>
		memcpy(dst, src, sz);<br>
	} else {<br>
		...<br>
	}<br>
<br>
<br>
-- <br>
Regards/Gruss,<br>
    Boris.<br>
<br>
<a  rel="nofollow" href="https://people.kernel.org/tglx/notes-about-netiquette">https://people.kernel.org/tglx/notes-about-netiquette</a><br>
<br>
<br>


BIOS now sets the x2apic enabled bit (and the ACPI table) for extended<br>
APIC modes.  Use that bit to indicate if extended mode is set.<br>
<br>
Signed-off-by: Mike Travis <mike.travis@xxxxxxx><br>
---<br>
 arch/x86/kernel/apic/x2apic_uv_x.c | 31 ++++++++++++++----------------<br>
 1 file changed, 14 insertions(+), 17 deletions(-)<br>
<br>
diff --git a/arch/x86/kernel/apic/x2apic_uv_x.c b/arch/x86/kernel/apic/x2apic_uv_x.c<br>
index 52bc217ca8c3..2e99605f9a05 100644<br>
--- a/arch/x86/kernel/apic/x2apic_uv_x.c<br>
+++ b/arch/x86/kernel/apic/x2apic_uv_x.c<br>
@@ -369,6 +369,15 @@ static int __init early_get_arch_type(void)<br>
 	return ret;<br>
 }<br>
 <br>
+/* UV system found, check which APIC MODE BIOS already selected */<br>
+static void __init early_set_apic_mode(void)<br>
+{<br>
+	if (x2apic_enabled())<br>
+		uv_system_type = UV_X2APIC;<br>
+	else<br>
+		uv_system_type = UV_LEGACY_APIC;<br>
+}<br>
+<br>
 static int __init uv_set_system_type(char *_oem_id, char *_oem_table_id)<br>
 {<br>
 	/* Save OEM_ID passed from ACPI MADT */<br>
@@ -404,11 +413,13 @@ static int __init uv_set_system_type(char *_oem_id, char *_oem_table_id)<br>
 		else<br>
 			uv_hubless_system |= 0x8;<br>
 <br>
-		/* Copy APIC type */<br>
+		/* Copy OEM Table ID and set APIC Mode */<br>
 		uv_stringify(sizeof(oem_table_id), oem_table_id, _oem_table_id);<br>
+		early_set_apic_mode();<br>
 <br>
 		pr_info("UV: OEM IDs %s/%s, SystemType %d, HUBLESS ID %x\n",<br>
 			oem_id, oem_table_id, uv_system_type, uv_hubless_system);<br>
+<br>
 		return 0;<br>
 	}<br>
 <br>
@@ -453,6 +464,7 @@ static int __init uv_set_system_type(char *_oem_id, char *_oem_table_id)<br>
 	early_set_hub_type();<br>
 <br>
 	/* Other UV setup functions */<br>
+	early_set_apic_mode();<br>
 	early_get_pnodeid();<br>
 	early_get_apic_socketid_shift();<br>
 	x86_platform.is_untracked_pat_range = uv_is_untracked_pat_range;<br>
@@ -472,29 +484,14 @@ static int __init uv_acpi_madt_oem_check(char *_oem_id, char *_oem_table_id)<br>
 	if (uv_set_system_type(_oem_id, _oem_table_id) == 0)<br>
 		return 0;<br>
 <br>
-	/* Save and Decode OEM Table ID */<br>
+	/* Save for display of the OEM Table ID */<br>
 	uv_stringify(sizeof(oem_table_id), oem_table_id, _oem_table_id);<br>
 <br>
-	/* This is the most common hardware variant, x2apic mode */<br>
-	if (!strcmp(oem_table_id, "UVX"))<br>
-		uv_system_type = UV_X2APIC;<br>
-<br>
-	/* Only used for very small systems, usually 1 chassis, legacy mode  */<br>
-	else if (!strcmp(oem_table_id, "UVL"))<br>
-		uv_system_type = UV_LEGACY_APIC;<br>
-<br>
-	else<br>
-		goto badbios;<br>
-<br>
 	pr_info("UV: OEM IDs %s/%s, System/UVType %d/0x%x, HUB RevID %d\n",<br>
 		oem_id, oem_table_id, uv_system_type, is_uv(UV_ANY),<br>
 		uv_min_hub_revision_id);<br>
 <br>
 	return 0;<br>
-<br>
-badbios:<br>
-	pr_err("UV: UVarchtype:%s not supported\n", uv_archtype);<br>
-	BUG();<br>
 }<br>
 <br>
 enum uv_system_type get_uv_system_type(void)<br>
-- <br>
2.21.0<br>
<br>
<br>


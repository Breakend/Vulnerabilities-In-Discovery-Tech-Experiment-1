Add a kselftest for testing process-wide perf events with synchronous<br>
SIGTRAP on events (using breakpoints). In particular, we want to test<br>
that changes to the event propagate to all children, and the SIGTRAPs<br>
are in fact synchronously sent to the thread where the event occurred.<br>
<br>
Note: The "signal_stress" test case is also added later in the series to<br>
perf tool's built-in tests. The test here is more elaborate in that<br>
respect, which on one hand avoids bloating the perf tool unnecessarily,<br>
but we also benefit from structured tests with TAP-compliant output that<br>
the kselftest framework provides.<br>
<br>
Signed-off-by: Marco Elver <elver@xxxxxxxxxx><br>
---<br>
v4:<br>
* Update for new perf_event_attr::sig_data / si_perf handling.<br>
<br>
v3:<br>
* Fix for latest libc signal.h.<br>
<br>
v2:<br>
* Patch added to series.<br>
---<br>
 .../testing/selftests/perf_events/.gitignore  |   2 +<br>
 tools/testing/selftests/perf_events/Makefile  |   6 +<br>
 tools/testing/selftests/perf_events/config    |   1 +<br>
 tools/testing/selftests/perf_events/settings  |   1 +<br>
 .../selftests/perf_events/sigtrap_threads.c   | 210 ++++++++++++++++++<br>
 5 files changed, 220 insertions(+)<br>
 create mode 100644 tools/testing/selftests/perf_events/.gitignore<br>
 create mode 100644 tools/testing/selftests/perf_events/Makefile<br>
 create mode 100644 tools/testing/selftests/perf_events/config<br>
 create mode 100644 tools/testing/selftests/perf_events/settings<br>
 create mode 100644 tools/testing/selftests/perf_events/sigtrap_threads.c<br>
<br>
diff --git a/tools/testing/selftests/perf_events/.gitignore b/tools/testing/selftests/perf_events/.gitignore<br>
new file mode 100644<br>
index 000000000000..4dc43e1bd79c<br>
--- /dev/null<br>
+++ b/tools/testing/selftests/perf_events/.gitignore<br>
@@ -0,0 +1,2 @@<br>
+# SPDX-License-Identifier: GPL-2.0-only<br>
+sigtrap_threads<br>
diff --git a/tools/testing/selftests/perf_events/Makefile b/tools/testing/selftests/perf_events/Makefile<br>
new file mode 100644<br>
index 000000000000..973a2c39ca83<br>
--- /dev/null<br>
+++ b/tools/testing/selftests/perf_events/Makefile<br>
@@ -0,0 +1,6 @@<br>
+# SPDX-License-Identifier: GPL-2.0<br>
+CFLAGS += -Wl,-no-as-needed -Wall -I../../../../usr/include<br>
+LDFLAGS += -lpthread<br>
+<br>
+TEST_GEN_PROGS := sigtrap_threads<br>
+include ../lib.mk<br>
diff --git a/tools/testing/selftests/perf_events/config b/tools/testing/selftests/perf_events/config<br>
new file mode 100644<br>
index 000000000000..ba58ff2203e4<br>
--- /dev/null<br>
+++ b/tools/testing/selftests/perf_events/config<br>
@@ -0,0 +1 @@<br>
+CONFIG_PERF_EVENTS=y<br>
diff --git a/tools/testing/selftests/perf_events/settings b/tools/testing/selftests/perf_events/settings<br>
new file mode 100644<br>
index 000000000000..6091b45d226b<br>
--- /dev/null<br>
+++ b/tools/testing/selftests/perf_events/settings<br>
@@ -0,0 +1 @@<br>
+timeout=120<br>
diff --git a/tools/testing/selftests/perf_events/sigtrap_threads.c b/tools/testing/selftests/perf_events/sigtrap_threads.c<br>
new file mode 100644<br>
index 000000000000..9c0fd442da60<br>
--- /dev/null<br>
+++ b/tools/testing/selftests/perf_events/sigtrap_threads.c<br>
@@ -0,0 +1,210 @@<br>
+// SPDX-License-Identifier: GPL-2.0<br>
+/*<br>
+ * Test for perf events with SIGTRAP across all threads.<br>
+ *<br>
+ * Copyright (C) 2021, Google LLC.<br>
+ */<br>
+<br>
+#define _GNU_SOURCE<br>
+<br>
+/* We need the latest siginfo from the kernel repo. */<br>
+#include <sys/types.h><br>
+#include <asm/siginfo.h><br>
+#define __have_siginfo_t 1<br>
+#define __have_sigval_t 1<br>
+#define __have_sigevent_t 1<br>
+#define __siginfo_t_defined<br>
+#define __sigval_t_defined<br>
+#define __sigevent_t_defined<br>
+#define _BITS_SIGINFO_CONSTS_H 1<br>
+#define _BITS_SIGEVENT_CONSTS_H 1<br>
+<br>
+#include <stdbool.h><br>
+#include <stddef.h><br>
+#include <stdint.h><br>
+#include <stdio.h><br>
+#include <linux/hw_breakpoint.h><br>
+#include <linux/perf_event.h><br>
+#include <pthread.h><br>
+#include <signal.h><br>
+#include <sys/ioctl.h><br>
+#include <sys/syscall.h><br>
+#include <unistd.h><br>
+<br>
+#include "../kselftest_harness.h"<br>
+<br>
+#define NUM_THREADS 5<br>
+<br>
+/* Data shared between test body, threads, and signal handler. */<br>
+static struct {<br>
+	int tids_want_signal;		/* Which threads still want a signal. */<br>
+	int signal_count;		/* Sanity check number of signals received. */<br>
+	volatile int iterate_on;	/* Variable to set breakpoint on. */<br>
+	siginfo_t first_siginfo;	/* First observed siginfo_t. */<br>
+} ctx;<br>
+<br>
+/* Unique value to check si_perf is correctly set from perf_event_attr::sig_data. */<br>
+#define TEST_SIG_DATA(addr) (~(uint64_t)(addr))<br>
+<br>
+static struct perf_event_attr make_event_attr(bool enabled, volatile void *addr)<br>
+{<br>
+	struct perf_event_attr attr = {<br>
+		.type		= PERF_TYPE_BREAKPOINT,<br>
+		.size		= sizeof(attr),<br>
+		.sample_period	= 1,<br>
+		.disabled	= !enabled,<br>
+		.bp_addr	= (unsigned long)addr,<br>
+		.bp_type	= HW_BREAKPOINT_RW,<br>
+		.bp_len		= HW_BREAKPOINT_LEN_1,<br>
+		.inherit	= 1, /* Children inherit events ... */<br>
+		.inherit_thread = 1, /* ... but only cloned with CLONE_THREAD. */<br>
+		.remove_on_exec = 1, /* Required by sigtrap. */<br>
+		.sigtrap	= 1, /* Request synchronous SIGTRAP on event. */<br>
+		.sig_data	= TEST_SIG_DATA(addr),<br>
+	};<br>
+	return attr;<br>
+}<br>
+<br>
+static void sigtrap_handler(int signum, siginfo_t *info, void *ucontext)<br>
+{<br>
+	if (info->si_code != TRAP_PERF) {<br>
+		fprintf(stderr, "%s: unexpected si_code %d\n", __func__, info->si_code);<br>
+		return;<br>
+	}<br>
+<br>
+	/*<br>
+	 * The data in siginfo_t we're interested in should all be the same<br>
+	 * across threads.<br>
+	 */<br>
+	if (!__atomic_fetch_add(&ctx.signal_count, 1, __ATOMIC_RELAXED))<br>
+		ctx.first_siginfo = *info;<br>
+	__atomic_fetch_sub(&ctx.tids_want_signal, syscall(__NR_gettid), __ATOMIC_RELAXED);<br>
+}<br>
+<br>
+static void *test_thread(void *arg)<br>
+{<br>
+	pthread_barrier_t *barrier = (pthread_barrier_t *)arg;<br>
+	pid_t tid = syscall(__NR_gettid);<br>
+	int iter;<br>
+	int i;<br>
+<br>
+	pthread_barrier_wait(barrier);<br>
+<br>
+	__atomic_fetch_add(&ctx.tids_want_signal, tid, __ATOMIC_RELAXED);<br>
+	iter = ctx.iterate_on; /* read */<br>
+	for (i = 0; i < iter - 1; i++) {<br>
+		__atomic_fetch_add(&ctx.tids_want_signal, tid, __ATOMIC_RELAXED);<br>
+		ctx.iterate_on = iter; /* idempotent write */<br>
+	}<br>
+<br>
+	return NULL;<br>
+}<br>
+<br>
+FIXTURE(sigtrap_threads)<br>
+{<br>
+	struct sigaction oldact;<br>
+	pthread_t threads[NUM_THREADS];<br>
+	pthread_barrier_t barrier;<br>
+	int fd;<br>
+};<br>
+<br>
+FIXTURE_SETUP(sigtrap_threads)<br>
+{<br>
+	struct perf_event_attr attr = make_event_attr(false, &ctx.iterate_on);<br>
+	struct sigaction action = {};<br>
+	int i;<br>
+<br>
+	memset(&ctx, 0, sizeof(ctx));<br>
+<br>
+	/* Initialize sigtrap handler. */<br>
+	action.sa_flags = SA_SIGINFO | SA_NODEFER;<br>
+	action.sa_sigaction = sigtrap_handler;<br>
+	sigemptyset(&action.sa_mask);<br>
+	ASSERT_EQ(sigaction(SIGTRAP, &action, &self->oldact), 0);<br>
+<br>
+	/* Initialize perf event. */<br>
+	self->fd = syscall(__NR_perf_event_open, &attr, 0, -1, -1, PERF_FLAG_FD_CLOEXEC);<br>
+	ASSERT_NE(self->fd, -1);<br>
+<br>
+	/* Spawn threads inheriting perf event. */<br>
+	pthread_barrier_init(&self->barrier, NULL, NUM_THREADS + 1);<br>
+	for (i = 0; i < NUM_THREADS; i++)<br>
+		ASSERT_EQ(pthread_create(&self->threads[i], NULL, test_thread, &self->barrier), 0);<br>
+}<br>
+<br>
+FIXTURE_TEARDOWN(sigtrap_threads)<br>
+{<br>
+	pthread_barrier_destroy(&self->barrier);<br>
+	close(self->fd);<br>
+	sigaction(SIGTRAP, &self->oldact, NULL);<br>
+}<br>
+<br>
+static void run_test_threads(struct __test_metadata *_metadata,<br>
+			     FIXTURE_DATA(sigtrap_threads) *self)<br>
+{<br>
+	int i;<br>
+<br>
+	pthread_barrier_wait(&self->barrier);<br>
+	for (i = 0; i < NUM_THREADS; i++)<br>
+		ASSERT_EQ(pthread_join(self->threads[i], NULL), 0);<br>
+}<br>
+<br>
+TEST_F(sigtrap_threads, remain_disabled)<br>
+{<br>
+	run_test_threads(_metadata, self);<br>
+	EXPECT_EQ(ctx.signal_count, 0);<br>
+	EXPECT_NE(ctx.tids_want_signal, 0);<br>
+}<br>
+<br>
+TEST_F(sigtrap_threads, enable_event)<br>
+{<br>
+	EXPECT_EQ(ioctl(self->fd, PERF_EVENT_IOC_ENABLE, 0), 0);<br>
+	run_test_threads(_metadata, self);<br>
+<br>
+	EXPECT_EQ(ctx.signal_count, NUM_THREADS);<br>
+	EXPECT_EQ(ctx.tids_want_signal, 0);<br>
+	EXPECT_EQ(ctx.first_siginfo.si_addr, &ctx.iterate_on);<br>
+	EXPECT_EQ(ctx.first_siginfo.si_errno, PERF_TYPE_BREAKPOINT);<br>
+	EXPECT_EQ(ctx.first_siginfo.si_perf, TEST_SIG_DATA(&ctx.iterate_on));<br>
+<br>
+	/* Check enabled for parent. */<br>
+	ctx.iterate_on = 0;<br>
+	EXPECT_EQ(ctx.signal_count, NUM_THREADS + 1);<br>
+}<br>
+<br>
+/* Test that modification propagates to all inherited events. */<br>
+TEST_F(sigtrap_threads, modify_and_enable_event)<br>
+{<br>
+	struct perf_event_attr new_attr = make_event_attr(true, &ctx.iterate_on);<br>
+<br>
+	EXPECT_EQ(ioctl(self->fd, PERF_EVENT_IOC_MODIFY_ATTRIBUTES, &new_attr), 0);<br>
+	run_test_threads(_metadata, self);<br>
+<br>
+	EXPECT_EQ(ctx.signal_count, NUM_THREADS);<br>
+	EXPECT_EQ(ctx.tids_want_signal, 0);<br>
+	EXPECT_EQ(ctx.first_siginfo.si_addr, &ctx.iterate_on);<br>
+	EXPECT_EQ(ctx.first_siginfo.si_errno, PERF_TYPE_BREAKPOINT);<br>
+	EXPECT_EQ(ctx.first_siginfo.si_perf, TEST_SIG_DATA(&ctx.iterate_on));<br>
+<br>
+	/* Check enabled for parent. */<br>
+	ctx.iterate_on = 0;<br>
+	EXPECT_EQ(ctx.signal_count, NUM_THREADS + 1);<br>
+}<br>
+<br>
+/* Stress test event + signal handling. */<br>
+TEST_F(sigtrap_threads, signal_stress)<br>
+{<br>
+	ctx.iterate_on = 3000;<br>
+<br>
+	EXPECT_EQ(ioctl(self->fd, PERF_EVENT_IOC_ENABLE, 0), 0);<br>
+	run_test_threads(_metadata, self);<br>
+	EXPECT_EQ(ioctl(self->fd, PERF_EVENT_IOC_DISABLE, 0), 0);<br>
+<br>
+	EXPECT_EQ(ctx.signal_count, NUM_THREADS * ctx.iterate_on);<br>
+	EXPECT_EQ(ctx.tids_want_signal, 0);<br>
+	EXPECT_EQ(ctx.first_siginfo.si_addr, &ctx.iterate_on);<br>
+	EXPECT_EQ(ctx.first_siginfo.si_errno, PERF_TYPE_BREAKPOINT);<br>
+	EXPECT_EQ(ctx.first_siginfo.si_perf, TEST_SIG_DATA(&ctx.iterate_on));<br>
+}<br>
+<br>
+TEST_HARNESS_MAIN<br>
-- <br>
2.31.0.208.g409f899ff0-goog<br>
<br>
<br>


When rebooting the EHCI driver, ehci_shutdown() will be called.<br>
if the sbrn flag is 0, ehci_shutdown() will return directly.<br>
<br>
Our EHCI hardware does not define the SBRN register, which cause<br>
its value to default to 0. The sbrn flag being 0 will cause the<br>
EHCI interrupt signal to not be turned off after reboot. An interrupt<br>
that is not closed will cause an exception to the device sharing<br>
the interrupt.<br>
<br>
Currently, our hardware has this problem. We hope to solve this<br>
problem by skipping reading the sbrn register value. On the next<br>
generation of hardware, we will define this SBRN register in accordance<br>
with the controller standard.<br>
<br>
Signed-off-by: Longfang Liu <liulongfang@xxxxxxxxxx><br>
---<br>
 drivers/usb/host/ehci-pci.c | 2 ++<br>
 1 file changed, 2 insertions(+)<br>
<br>
diff --git a/drivers/usb/host/ehci-pci.c b/drivers/usb/host/ehci-pci.c<br>
index 3c3820a..5dc6821 100644<br>
--- a/drivers/usb/host/ehci-pci.c<br>
+++ b/drivers/usb/host/ehci-pci.c<br>
@@ -291,6 +291,8 @@ static int ehci_pci_setup(struct usb_hcd *hcd)<br>
 	if (pdev->vendor == PCI_VENDOR_ID_STMICRO<br>
 	    && pdev->device == PCI_DEVICE_ID_STMICRO_USB_HOST)<br>
 		;	/* ConneXT has no sbrn register */<br>
+	else if (pdev->vendor == PCI_VENDOR_ID_HUAWEI)<br>
+		;	/* sbrn register is undefined */<br>
 	else<br>
 		pci_read_config_byte(pdev, 0x60, &ehci->sbrn);<br>
 <br>
-- <br>
2.8.1<br>
<br>
<br>


On 04/07/21 at 07:03pm, Petr Mladek wrote:<br>
><i> On Tue 2021-03-30 20:05:20, Stephen Boyd wrote:</i><br>
><i> > We can use the vmlinux_build_id array here now instead of open coding</i><br>
><i> > it. This mostly consolidates code.</i><br>
><i> > </i><br>
><i> > Cc: Jiri Olsa <jolsa@xxxxxxxxxx></i><br>
><i> > Cc: Alexei Starovoitov <ast@xxxxxxxxxx></i><br>
><i> > Cc: Jessica Yu <jeyu@xxxxxxxxxx></i><br>
><i> > Cc: Evan Green <evgreen@xxxxxxxxxxxx></i><br>
><i> > Cc: Hsin-Yi Wang <hsinyi@xxxxxxxxxxxx></i><br>
><i> > Cc: Dave Young <dyoung@xxxxxxxxxx></i><br>
><i> > Cc: Baoquan He <bhe@xxxxxxxxxx></i><br>
><i> > Cc: Vivek Goyal <vgoyal@xxxxxxxxxx></i><br>
><i> > Cc: <kexec@xxxxxxxxxxxxxxxxxxx></i><br>
><i> > Signed-off-by: Stephen Boyd <swboyd@xxxxxxxxxxxx></i><br>
><i> > ---</i><br>
><i> >  include/linux/crash_core.h |  6 +-----</i><br>
><i> >  kernel/crash_core.c        | 41 ++------------------------------------</i><br>
><i> >  2 files changed, 3 insertions(+), 44 deletions(-)</i><br>
><i> > </i><br>
><i> > diff --git a/include/linux/crash_core.h b/include/linux/crash_core.h</i><br>
><i> > index 206bde8308b2..fb8ab99bb2ee 100644</i><br>
><i> > --- a/include/linux/crash_core.h</i><br>
><i> > +++ b/include/linux/crash_core.h</i><br>
><i> > @@ -39,7 +39,7 @@ phys_addr_t paddr_vmcoreinfo_note(void);</i><br>
><i> >  #define VMCOREINFO_OSRELEASE(value) \</i><br>
><i> >  	vmcoreinfo_append_str("OSRELEASE=%s\n", value)</i><br>
><i> >  #define VMCOREINFO_BUILD_ID(value) \</i><br>
><i> > -	vmcoreinfo_append_str("BUILD-ID=%s\n", value)</i><br>
><i> > +	vmcoreinfo_append_str("BUILD-ID=%20phN\n", value)</i><br>
<br>
I may miss something, wondering why we need add '20' here.<br>
<br>
><i> </i><br>
><i> Please, add also build check that BUILD_ID_MAX == 20.</i><br>
><i> </i><br>
><i> </i><br>
><i> >  #define VMCOREINFO_PAGESIZE(value) \</i><br>
><i> >  	vmcoreinfo_append_str("PAGESIZE=%ld\n", value)</i><br>
><i> >  #define VMCOREINFO_SYMBOL(name) \</i><br>
><i> > @@ -69,10 +69,6 @@ extern unsigned char *vmcoreinfo_data;</i><br>
><i> >  extern size_t vmcoreinfo_size;</i><br>
><i> >  extern u32 *vmcoreinfo_note;</i><br>
><i> >  </i><br>
><i> > -/* raw contents of kernel .notes section */</i><br>
><i> > -extern const void __start_notes __weak;</i><br>
><i> > -extern const void __stop_notes __weak;</i><br>
><i> > -</i><br>
><i> >  Elf_Word *append_elf_note(Elf_Word *buf, char *name, unsigned int type,</i><br>
><i> >  			  void *data, size_t data_len);</i><br>
><i> >  void final_note(Elf_Word *buf);</i><br>
><i> > diff --git a/kernel/crash_core.c b/kernel/crash_core.c</i><br>
><i> > index 825284baaf46..6b560cf9f374 100644</i><br>
><i> > --- a/kernel/crash_core.c</i><br>
><i> > +++ b/kernel/crash_core.c</i><br>
><i> > @@ -4,6 +4,7 @@</i><br>
><i> >   * Copyright (C) 2002-2004 Eric Biederman  <ebiederm@xxxxxxxxxxxx></i><br>
><i> >   */</i><br>
><i> >  </i><br>
><i> > +#include <linux/buildid.h></i><br>
><i> >  #include <linux/crash_core.h></i><br>
><i> >  #include <linux/utsname.h></i><br>
><i> >  #include <linux/vmalloc.h></i><br>
><i> > @@ -378,51 +379,13 @@ phys_addr_t __weak paddr_vmcoreinfo_note(void)</i><br>
><i> >  }</i><br>
><i> >  EXPORT_SYMBOL(paddr_vmcoreinfo_note);</i><br>
><i> >  </i><br>
><i> > -#define NOTES_SIZE (&__stop_notes - &__start_notes)</i><br>
><i> > -#define BUILD_ID_MAX SHA1_DIGEST_SIZE</i><br>
><i> > -#define NT_GNU_BUILD_ID 3</i><br>
><i> > -</i><br>
><i> > -struct elf_note_section {</i><br>
><i> > -	struct elf_note	n_hdr;</i><br>
><i> > -	u8 n_data[];</i><br>
><i> > -};</i><br>
><i> > -</i><br>
><i> >  /*</i><br>
><i> >   * Add build ID from .notes section as generated by the GNU ld(1)</i><br>
><i> >   * or LLVM lld(1) --build-id option.</i><br>
><i> >   */</i><br>
><i> >  static void add_build_id_vmcoreinfo(void)</i><br>
><i> >  {</i><br>
><i> > -	char build_id[BUILD_ID_MAX * 2 + 1];</i><br>
><i> > -	int n_remain = NOTES_SIZE;</i><br>
><i> > -</i><br>
><i> > -	while (n_remain >= sizeof(struct elf_note)) {</i><br>
><i> > -		const struct elf_note_section *note_sec =</i><br>
><i> > -			&__start_notes + NOTES_SIZE - n_remain;</i><br>
><i> > -		const u32 n_namesz = note_sec->n_hdr.n_namesz;</i><br>
><i> > -</i><br>
><i> > -		if (note_sec->n_hdr.n_type == NT_GNU_BUILD_ID &&</i><br>
><i> > -		    n_namesz != 0 &&</i><br>
><i> > -		    !strcmp((char *)&note_sec->n_data[0], "GNU")) {</i><br>
><i> > -			if (note_sec->n_hdr.n_descsz <= BUILD_ID_MAX) {</i><br>
><i> > -				const u32 n_descsz = note_sec->n_hdr.n_descsz;</i><br>
><i> > -				const u8 *s = &note_sec->n_data[n_namesz];</i><br>
><i> > -</i><br>
><i> > -				s = PTR_ALIGN(s, 4);</i><br>
><i> > -				bin2hex(build_id, s, n_descsz);</i><br>
><i> > -				build_id[2 * n_descsz] = '\0';</i><br>
><i> > -				VMCOREINFO_BUILD_ID(build_id);</i><br>
><i> > -				return;</i><br>
><i> > -			}</i><br>
><i> > -			pr_warn("Build ID is too large to include in vmcoreinfo: %u > %u\n",</i><br>
><i> > -				note_sec->n_hdr.n_descsz,</i><br>
><i> > -				BUILD_ID_MAX);</i><br>
><i> > -			return;</i><br>
><i> > -		}</i><br>
><i> > -		n_remain -= sizeof(struct elf_note) +</i><br>
><i> > -			ALIGN(note_sec->n_hdr.n_namesz, 4) +</i><br>
><i> > -			ALIGN(note_sec->n_hdr.n_descsz, 4);</i><br>
><i> > -	}</i><br>
><i> > +	VMCOREINFO_BUILD_ID(vmlinux_build_id);</i><br>
><i> >  }</i><br>
><i> </i><br>
><i> The function add_build_id_vmcoreinfo() is used in</i><br>
><i> crash_save_vmcoreinfo_init() in this context:</i><br>
><i> </i><br>
><i> </i><br>
><i> 	VMCOREINFO_OSRELEASE(init_uts_ns.name.release);</i><br>
><i> 	add_build_id_vmcoreinfo();</i><br>
><i> 	VMCOREINFO_PAGESIZE(PAGE_SIZE);</i><br>
><i> </i><br>
><i> 	VMCOREINFO_SYMBOL(init_uts_ns);</i><br>
><i> 	VMCOREINFO_OFFSET(uts_namespace, name);</i><br>
><i> 	VMCOREINFO_SYMBOL(node_online_map);</i><br>
><i> </i><br>
><i> The function is not longer need. VMCOREINFO_BUILD_ID()</i><br>
><i> can be used directly:</i><br>
><i> </i><br>
><i> 	VMCOREINFO_OSRELEASE(init_uts_ns.name.release);</i><br>
><i> 	VMCOREINFO_BUILD_ID(vmlinux_build_id);</i><br>
><i> 	VMCOREINFO_PAGESIZE(PAGE_SIZE);</i><br>
><i> </i><br>
><i> 	VMCOREINFO_SYMBOL(init_uts_ns);</i><br>
><i> 	VMCOREINFO_OFFSET(uts_namespace, name);</i><br>
><i> 	VMCOREINFO_SYMBOL(node_online_map);</i><br>
><i> </i><br>
><i> </i><br>
><i> Best Regards,</i><br>
><i> Petr</i><br>
><i> </i><br>
><i> </i><br>
><i> >  </i><br>
><i> >  static int __init crash_save_vmcoreinfo_init(void)</i><br>
><i> > -- </i><br>
><i> > <a  rel="nofollow" href="https://chromeos.dev">https://chromeos.dev</a></i><br>
><i> </i><br>
<br>
<br>


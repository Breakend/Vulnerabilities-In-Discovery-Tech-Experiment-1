Add support for MT7530 interrupt controller to handle internal PHYs.<br>
In order to assign an IRQ number to each PHY, the registration of MDIO bus<br>
is also done in this driver.<br>
<br>
Signed-off-by: DENG Qingfang <dqfext@xxxxxxxxx><br>
---<br>
RFC v2 -> RFC v3:<br>
- Rework IRQ request and free procedure.<br>
- Add irq_set_nested_thread.<br>
- Move mt753x_phy_{read,write} functions.<br>
<br>
 drivers/net/dsa/Kconfig  |   1 +<br>
 drivers/net/dsa/mt7530.c | 266 +++++++++++++++++++++++++++++++++++----<br>
 drivers/net/dsa/mt7530.h |  20 ++-<br>
 3 files changed, 258 insertions(+), 29 deletions(-)<br>
<br>
diff --git a/drivers/net/dsa/Kconfig b/drivers/net/dsa/Kconfig<br>
index a5f1aa911fe2..264384449f09 100644<br>
--- a/drivers/net/dsa/Kconfig<br>
+++ b/drivers/net/dsa/Kconfig<br>
@@ -36,6 +36,7 @@ config NET_DSA_LANTIQ_GSWIP<br>
 config NET_DSA_MT7530<br>
 	tristate "MediaTek MT753x and MT7621 Ethernet switch support"<br>
 	select NET_DSA_TAG_MTK<br>
+	select MEDIATEK_PHY<br>
 	help<br>
 	  This enables support for the MediaTek MT7530, MT7531, and MT7621<br>
 	  Ethernet switch chips.<br>
diff --git a/drivers/net/dsa/mt7530.c b/drivers/net/dsa/mt7530.c<br>
index 2bd1bab71497..da033004a74d 100644<br>
--- a/drivers/net/dsa/mt7530.c<br>
+++ b/drivers/net/dsa/mt7530.c<br>
@@ -10,6 +10,7 @@<br>
 #include <linux/mfd/syscon.h><br>
 #include <linux/module.h><br>
 #include <linux/netdevice.h><br>
+#include <linux/of_irq.h><br>
 #include <linux/of_mdio.h><br>
 #include <linux/of_net.h><br>
 #include <linux/of_platform.h><br>
@@ -596,18 +597,14 @@ mt7530_mib_reset(struct dsa_switch *ds)<br>
 	mt7530_write(priv, MT7530_MIB_CCR, CCR_MIB_ACTIVATE);<br>
 }<br>
 <br>
-static int mt7530_phy_read(struct dsa_switch *ds, int port, int regnum)<br>
+static int mt7530_phy_read(struct mt7530_priv *priv, int port, int regnum)<br>
 {<br>
-	struct mt7530_priv *priv = ds->priv;<br>
-<br>
 	return mdiobus_read_nested(priv->bus, port, regnum);<br>
 }<br>
 <br>
-static int mt7530_phy_write(struct dsa_switch *ds, int port, int regnum,<br>
+static int mt7530_phy_write(struct mt7530_priv *priv, int port, int regnum,<br>
 			    u16 val)<br>
 {<br>
-	struct mt7530_priv *priv = ds->priv;<br>
-<br>
 	return mdiobus_write_nested(priv->bus, port, regnum, val);<br>
 }<br>
 <br>
@@ -785,9 +782,8 @@ mt7531_ind_c22_phy_write(struct mt7530_priv *priv, int port, int regnum,<br>
 }<br>
 <br>
 static int<br>
-mt7531_ind_phy_read(struct dsa_switch *ds, int port, int regnum)<br>
+mt7531_ind_phy_read(struct mt7530_priv *priv, int port, int regnum)<br>
 {<br>
-	struct mt7530_priv *priv = ds->priv;<br>
 	int devad;<br>
 	int ret;<br>
 <br>
@@ -803,10 +799,9 @@ mt7531_ind_phy_read(struct dsa_switch *ds, int port, int regnum)<br>
 }<br>
 <br>
 static int<br>
-mt7531_ind_phy_write(struct dsa_switch *ds, int port, int regnum,<br>
+mt7531_ind_phy_write(struct mt7530_priv *priv, int port, int regnum,<br>
 		     u16 data)<br>
 {<br>
-	struct mt7530_priv *priv = ds->priv;<br>
 	int devad;<br>
 	int ret;<br>
 <br>
@@ -822,6 +817,22 @@ mt7531_ind_phy_write(struct dsa_switch *ds, int port, int regnum,<br>
 	return ret;<br>
 }<br>
 <br>
+static int<br>
+mt753x_phy_read(struct mii_bus *bus, int port, int regnum)<br>
+{<br>
+	struct mt7530_priv *priv = bus->priv;<br>
+<br>
+	return priv->info->phy_read(priv, port, regnum);<br>
+}<br>
+<br>
+static int<br>
+mt753x_phy_write(struct mii_bus *bus, int port, int regnum, u16 val)<br>
+{<br>
+	struct mt7530_priv *priv = bus->priv;<br>
+<br>
+	return priv->info->phy_write(priv, port, regnum, val);<br>
+}<br>
+<br>
 static void<br>
 mt7530_get_strings(struct dsa_switch *ds, int port, u32 stringset,<br>
 		   uint8_t *data)<br>
@@ -1828,6 +1839,211 @@ mt7530_setup_gpio(struct mt7530_priv *priv)<br>
 }<br>
 #endif /* CONFIG_GPIOLIB */<br>
 <br>
+static irqreturn_t<br>
+mt7530_irq_thread_fn(int irq, void *dev_id)<br>
+{<br>
+	struct mt7530_priv *priv = dev_id;<br>
+	bool handled = false;<br>
+	u32 val;<br>
+	int p;<br>
+<br>
+	mutex_lock_nested(&priv->bus->mdio_lock, MDIO_MUTEX_NESTED);<br>
+	val = mt7530_mii_read(priv, MT7530_SYS_INT_STS);<br>
+	mt7530_mii_write(priv, MT7530_SYS_INT_STS, val);<br>
+	mutex_unlock(&priv->bus->mdio_lock);<br>
+<br>
+	for (p = 0; p < MT7530_NUM_PHYS; p++) {<br>
+		if (BIT(p) & val) {<br>
+			unsigned int irq;<br>
+<br>
+			irq = irq_find_mapping(priv->irq_domain, p);<br>
+			handle_nested_irq(irq);<br>
+			handled = true;<br>
+		}<br>
+	}<br>
+<br>
+	return IRQ_RETVAL(handled);<br>
+}<br>
+<br>
+static void<br>
+mt7530_irq_mask(struct irq_data *d)<br>
+{<br>
+	struct mt7530_priv *priv = irq_data_get_irq_chip_data(d);<br>
+<br>
+	priv->irq_enable &= ~BIT(d->hwirq);<br>
+}<br>
+<br>
+static void<br>
+mt7530_irq_unmask(struct irq_data *d)<br>
+{<br>
+	struct mt7530_priv *priv = irq_data_get_irq_chip_data(d);<br>
+<br>
+	priv->irq_enable |= BIT(d->hwirq);<br>
+}<br>
+<br>
+static void<br>
+mt7530_irq_bus_lock(struct irq_data *d)<br>
+{<br>
+	struct mt7530_priv *priv = irq_data_get_irq_chip_data(d);<br>
+<br>
+	mutex_lock_nested(&priv->bus->mdio_lock, MDIO_MUTEX_NESTED);<br>
+}<br>
+<br>
+static void<br>
+mt7530_irq_bus_sync_unlock(struct irq_data *d)<br>
+{<br>
+	struct mt7530_priv *priv = irq_data_get_irq_chip_data(d);<br>
+<br>
+	mt7530_mii_write(priv, MT7530_SYS_INT_EN, priv->irq_enable);<br>
+	mutex_unlock(&priv->bus->mdio_lock);<br>
+}<br>
+<br>
+static struct irq_chip mt7530_irq_chip = {<br>
+	.name = KBUILD_MODNAME,<br>
+	.irq_mask = mt7530_irq_mask,<br>
+	.irq_unmask = mt7530_irq_unmask,<br>
+	.irq_bus_lock = mt7530_irq_bus_lock,<br>
+	.irq_bus_sync_unlock = mt7530_irq_bus_sync_unlock,<br>
+};<br>
+<br>
+static int<br>
+mt7530_irq_map(struct irq_domain *domain, unsigned int irq,<br>
+	       irq_hw_number_t hwirq)<br>
+{<br>
+	irq_set_chip_data(irq, domain->host_data);<br>
+	irq_set_chip_and_handler(irq, &mt7530_irq_chip, handle_simple_irq);<br>
+	irq_set_nested_thread(irq, true);<br>
+	irq_set_noprobe(irq);<br>
+<br>
+	return 0;<br>
+}<br>
+<br>
+static const struct irq_domain_ops mt7530_irq_domain_ops = {<br>
+	.map = mt7530_irq_map,<br>
+	.xlate = irq_domain_xlate_onecell,<br>
+};<br>
+<br>
+static void<br>
+mt7530_setup_mdio_irq(struct mt7530_priv *priv)<br>
+{<br>
+	struct dsa_switch *ds = priv->ds;<br>
+	int p;<br>
+<br>
+	for (p = 0; p < MT7530_NUM_PHYS; p++) {<br>
+		if (BIT(p) & ds->phys_mii_mask) {<br>
+			unsigned int irq;<br>
+<br>
+			irq = irq_create_mapping(priv->irq_domain, p);<br>
+			ds->slave_mii_bus->irq[p] = irq;<br>
+		}<br>
+	}<br>
+}<br>
+<br>
+static int<br>
+mt7530_setup_irq(struct mt7530_priv *priv)<br>
+{<br>
+	struct device *dev = priv->dev;<br>
+	struct device_node *np = dev->of_node;<br>
+	int ret;<br>
+<br>
+	if (!of_property_read_bool(np, "interrupt-controller")) {<br>
+		dev_info(dev, "no interrupt support\n");<br>
+		return 0;<br>
+	}<br>
+<br>
+	priv->irq = of_irq_get(np, 0);<br>
+	if (priv->irq <= 0) {<br>
+		dev_err(dev, "failed to get parent IRQ: %d\n", priv->irq);<br>
+		return priv->irq ? : -EINVAL;<br>
+	}<br>
+<br>
+	priv->irq_domain = irq_domain_add_linear(np, MT7530_NUM_PHYS,<br>
+						&mt7530_irq_domain_ops, priv);<br>
+	if (!priv->irq_domain) {<br>
+		dev_err(dev, "failed to create IRQ domain\n");<br>
+		return -ENOMEM;<br>
+	}<br>
+<br>
+	/* This register must be set for MT7530 to properly fire interrupts */<br>
+	if (priv->id != ID_MT7531)<br>
+		mt7530_set(priv, MT7530_TOP_SIG_CTRL, TOP_SIG_CTRL_NORMAL);<br>
+<br>
+	ret = request_threaded_irq(priv->irq, NULL, mt7530_irq_thread_fn,<br>
+				   IRQF_ONESHOT, KBUILD_MODNAME, priv);<br>
+	if (ret) {<br>
+		irq_domain_remove(priv->irq_domain);<br>
+		dev_err(dev, "failed to request IRQ: %d\n", ret);<br>
+		return ret;<br>
+	}<br>
+<br>
+	return 0;<br>
+}<br>
+<br>
+static void<br>
+mt7530_free_mdio_irq(struct mt7530_priv *priv)<br>
+{<br>
+	int p;<br>
+<br>
+	for (p = 0; p < MT7530_NUM_PHYS; p++) {<br>
+		if (BIT(p) & priv->ds->phys_mii_mask) {<br>
+			unsigned int irq;<br>
+<br>
+			irq = irq_find_mapping(priv->irq_domain, p);<br>
+			irq_dispose_mapping(irq);<br>
+		}<br>
+	}<br>
+}<br>
+<br>
+<br>
+static void<br>
+mt7530_free_irq_common(struct mt7530_priv *priv)<br>
+{<br>
+	free_irq(priv->irq, priv);<br>
+	irq_domain_remove(priv->irq_domain);<br>
+}<br>
+<br>
+static void<br>
+mt7530_free_irq(struct mt7530_priv *priv)<br>
+{<br>
+	mt7530_free_mdio_irq(priv);<br>
+	mt7530_free_irq_common(priv);<br>
+}<br>
+<br>
+static int<br>
+mt7530_setup_mdio(struct mt7530_priv *priv)<br>
+{<br>
+	struct dsa_switch *ds = priv->ds;<br>
+	struct device *dev = priv->dev;<br>
+	struct mii_bus *bus;<br>
+	static int idx;<br>
+	int ret;<br>
+<br>
+	bus = devm_mdiobus_alloc(dev);<br>
+	if (!bus)<br>
+		return -ENOMEM;<br>
+<br>
+	ds->slave_mii_bus = bus;<br>
+	bus->priv = priv;<br>
+	bus->name = KBUILD_MODNAME "-mii";<br>
+	snprintf(bus->id, MII_BUS_ID_SIZE, KBUILD_MODNAME "-%d", idx++);<br>
+	bus->read = mt753x_phy_read;<br>
+	bus->write = mt753x_phy_write;<br>
+	bus->parent = dev;<br>
+	bus->phy_mask = ~ds->phys_mii_mask;<br>
+<br>
+	if (priv->irq)<br>
+		mt7530_setup_mdio_irq(priv);<br>
+<br>
+	ret = mdiobus_register(bus);<br>
+	if (ret) {<br>
+		dev_err(dev, "failed to register MDIO bus: %d\n", ret);<br>
+		if (priv->irq)<br>
+			mt7530_free_mdio_irq(priv);<br>
+	}<br>
+<br>
+	return ret;<br>
+}<br>
+<br>
 static int<br>
 mt7530_setup(struct dsa_switch *ds)<br>
 {<br>
@@ -2780,32 +2996,25 @@ static int<br>
 mt753x_setup(struct dsa_switch *ds)<br>
 {<br>
 	struct mt7530_priv *priv = ds->priv;<br>
+	int ret = priv->info->sw_setup(ds);<br>
+	if (ret)<br>
+		return ret;<br>
 <br>
-	return priv->info->sw_setup(ds);<br>
-}<br>
-<br>
-static int<br>
-mt753x_phy_read(struct dsa_switch *ds, int port, int regnum)<br>
-{<br>
-	struct mt7530_priv *priv = ds->priv;<br>
-<br>
-	return priv->info->phy_read(ds, port, regnum);<br>
-}<br>
+	ret = mt7530_setup_irq(priv);<br>
+	if (ret)<br>
+		return ret;<br>
 <br>
-static int<br>
-mt753x_phy_write(struct dsa_switch *ds, int port, int regnum, u16 val)<br>
-{<br>
-	struct mt7530_priv *priv = ds->priv;<br>
+	ret = mt7530_setup_mdio(priv);<br>
+	if (ret && priv->irq)<br>
+		mt7530_free_irq_common(priv);<br>
 <br>
-	return priv->info->phy_write(ds, port, regnum, val);<br>
+	return ret;<br>
 }<br>
 <br>
 static const struct dsa_switch_ops mt7530_switch_ops = {<br>
 	.get_tag_protocol	= mtk_get_tag_protocol,<br>
 	.setup			= mt753x_setup,<br>
 	.get_strings		= mt7530_get_strings,<br>
-	.phy_read		= mt753x_phy_read,<br>
-	.phy_write		= mt753x_phy_write,<br>
 	.get_ethtool_stats	= mt7530_get_ethtool_stats,<br>
 	.get_sset_count		= mt7530_get_sset_count,<br>
 	.set_ageing_time	= mt7530_set_ageing_time,<br>
@@ -2986,6 +3195,9 @@ mt7530_remove(struct mdio_device *mdiodev)<br>
 		dev_err(priv->dev, "Failed to disable io pwr: %d\n",<br>
 			ret);<br>
 <br>
+	if (priv->irq)<br>
+		mt7530_free_irq(priv);<br>
+<br>
 	dsa_unregister_switch(priv->ds);<br>
 	mutex_destroy(&priv->reg_mutex);<br>
 }<br>
diff --git a/drivers/net/dsa/mt7530.h b/drivers/net/dsa/mt7530.h<br>
index ec36ea5dfd57..62fcaabefba1 100644<br>
--- a/drivers/net/dsa/mt7530.h<br>
+++ b/drivers/net/dsa/mt7530.h<br>
@@ -7,6 +7,7 @@<br>
 #define __MT7530_H<br>
 <br>
 #define MT7530_NUM_PORTS		7<br>
+#define MT7530_NUM_PHYS			5<br>
 #define MT7530_CPU_PORT			6<br>
 #define MT7530_NUM_FDB_RECORDS		2048<br>
 #define MT7530_ALL_MEMBERS		0xff<br>
@@ -381,6 +382,12 @@ enum mt7531_sgmii_force_duplex {<br>
 #define  SYS_CTRL_SW_RST		BIT(1)<br>
 #define  SYS_CTRL_REG_RST		BIT(0)<br>
 <br>
+/* Register for system interrupt */<br>
+#define MT7530_SYS_INT_EN		0x7008<br>
+<br>
+/* Register for system interrupt status */<br>
+#define MT7530_SYS_INT_STS		0x700c<br>
+<br>
 /* Register for PHY Indirect Access Control */<br>
 #define MT7531_PHY_IAC			0x701C<br>
 #define  MT7531_PHY_ACS_ST		BIT(31)<br>
@@ -702,6 +709,8 @@ static const char *p5_intf_modes(unsigned int p5_interface)<br>
 	}<br>
 }<br>
 <br>
+struct mt7530_priv;<br>
+<br>
 /* struct mt753x_info -	This is the main data structure for holding the specific<br>
  *			part for each supported device<br>
  * @sw_setup:		Holding the handler to a device initialization<br>
@@ -726,8 +735,8 @@ struct mt753x_info {<br>
 	enum mt753x_id id;<br>
 <br>
 	int (*sw_setup)(struct dsa_switch *ds);<br>
-	int (*phy_read)(struct dsa_switch *ds, int port, int regnum);<br>
-	int (*phy_write)(struct dsa_switch *ds, int port, int regnum, u16 val);<br>
+	int (*phy_read)(struct mt7530_priv *priv, int port, int regnum);<br>
+	int (*phy_write)(struct mt7530_priv *priv, int port, int regnum, u16 val);<br>
 	int (*pad_setup)(struct dsa_switch *ds, phy_interface_t interface);<br>
 	int (*cpu_port_config)(struct dsa_switch *ds, int port);<br>
 	bool (*phy_mode_supported)(struct dsa_switch *ds, int port,<br>
@@ -761,6 +770,10 @@ struct mt753x_info {<br>
  *			registers<br>
  * @p6_interface	Holding the current port 6 interface<br>
  * @p5_intf_sel:	Holding the current port 5 interface select<br>
+ *<br>
+ * @irq:		IRQ number of the switch<br>
+ * @irq_domain:		IRQ domain of the switch irq_chip<br>
+ * @irq_enable:		IRQ enable bits, synced to SYS_INT_EN<br>
  */<br>
 struct mt7530_priv {<br>
 	struct device		*dev;<br>
@@ -782,6 +795,9 @@ struct mt7530_priv {<br>
 	struct mt7530_port	ports[MT7530_NUM_PORTS];<br>
 	/* protect among processes for registers access*/<br>
 	struct mutex reg_mutex;<br>
+	int irq;<br>
+	struct irq_domain *irq_domain;<br>
+	u32 irq_enable;<br>
 };<br>
 <br>
 struct mt7530_hw_vlan_entry {<br>
-- <br>
2.25.1<br>
<br>
<br>


On Thu, Apr 08, 2021, Paolo Bonzini wrote:<br>
><i> On 08/04/21 17:48, Sean Christopherson wrote:</i><br>
><i> > Freaking PDPTRs.  I was really hoping we could keep the lock and pages_available()</i><br>
><i> > logic outside of the helpers.  What if kvm_mmu_load() reads the PDPTRs and</i><br>
><i> > passes them into mmu_alloc_shadow_roots()?  Or is that too ugly?</i><br>
><i> </i><br>
><i> The patch I have posted (though untested) tries to do that in a slightly</i><br>
><i> less ugly way by pushing make_mmu_pages_available down to mmu_alloc_*_roots.</i><br>
<br>
Yeah, I agree it's less ugly.  It would be nice to not duplicate that code, but<br>
it's probably not worth the ugliness.  :-/<br>
<br>
For your approach, can we put the out label after the success path?  Setting<br>
mmu->root_pgd isn't wrong per se, but doing so might mislead future readers into<br>
thinking that it's functionally necessary. <br>
<br>
<br>
diff --git a/arch/x86/kvm/mmu/mmu.c b/arch/x86/kvm/mmu/mmu.c<br>
index efb41f31e80a..93f97d0a9e2e 100644<br>
--- a/arch/x86/kvm/mmu/mmu.c<br>
+++ b/arch/x86/kvm/mmu/mmu.c<br>
@@ -3244,6 +3244,13 @@ static int mmu_alloc_direct_roots(struct kvm_vcpu *vcpu)<br>
        u8 shadow_root_level = mmu->shadow_root_level;<br>
        hpa_t root;<br>
        unsigned i;<br>
+       int r;<br>
+<br>
+       write_lock(&vcpu->kvm->mmu_lock);<br>
+<br>
+       r = make_mmu_pages_available(vcpu);<br>
+       if (r)<br>
+               goto out_unlock;<br>
<br>
        if (is_tdp_mmu_enabled(vcpu->kvm)) {<br>
                root = kvm_tdp_mmu_get_vcpu_root_hpa(vcpu);<br>
@@ -3252,8 +3259,10 @@ static int mmu_alloc_direct_roots(struct kvm_vcpu *vcpu)<br>
                root = mmu_alloc_root(vcpu, 0, 0, shadow_root_level, true);<br>
                mmu->root_hpa = root;<br>
        } else if (shadow_root_level == PT32E_ROOT_LEVEL) {<br>
-               if (WARN_ON_ONCE(!mmu->pae_root))<br>
-                       return -EIO;<br>
+               if (WARN_ON_ONCE(!mmu->pae_root)) {<br>
+                       r = -EIO;<br>
+                       goto out_unlock;<br>
+               }<br>
<br>
                for (i = 0; i < 4; ++i) {<br>
                        WARN_ON_ONCE(IS_VALID_PAE_ROOT(mmu->pae_root[i]));<br>
@@ -3266,13 +3275,15 @@ static int mmu_alloc_direct_roots(struct kvm_vcpu *vcpu)<br>
                mmu->root_hpa = __pa(mmu->pae_root);<br>
        } else {<br>
                WARN_ONCE(1, "Bad TDP root level = %d\n", shadow_root_level);<br>
-               return -EIO;<br>
+               r = -EIO;<br>
+               goto out_unlock;<br>
        }<br>
<br>
        /* root_pgd is ignored for direct MMUs. */<br>
        mmu->root_pgd = 0;<br>
-<br>
-       return 0;<br>
+out_unlock:<br>
+       write_unlock(&vcpu->kvm->mmu_lock);<br>
+       return r;<br>
 }<br>
<br>
 static int mmu_alloc_shadow_roots(struct kvm_vcpu *vcpu)<br>
@@ -3281,7 +3292,7 @@ static int mmu_alloc_shadow_roots(struct kvm_vcpu *vcpu)<br>
        u64 pdptrs[4], pm_mask;<br>
        gfn_t root_gfn, root_pgd;<br>
        hpa_t root;<br>
-       int i;<br>
+       int i, r;<br>
<br>
        root_pgd = mmu->get_guest_pgd(vcpu);<br>
        root_gfn = root_pgd >> PAGE_SHIFT;<br>
@@ -3289,6 +3300,10 @@ static int mmu_alloc_shadow_roots(struct kvm_vcpu *vcpu)<br>
        if (mmu_check_root(vcpu, root_gfn))<br>
                return 1;<br>
<br>
+       /*<br>
+        * On SVM, reading PDPTRs might access guest memory, which might fault<br>
+        * and thus might sleep.  Grab the PDPTRs before acquiring mmu_lock.<br>
+        */<br>
        if (mmu->root_level == PT32E_ROOT_LEVEL) {<br>
                for (i = 0; i < 4; ++i) {<br>
                        pdptrs[i] = mmu->get_pdptr(vcpu, i);<br>
@@ -3300,6 +3315,12 @@ static int mmu_alloc_shadow_roots(struct kvm_vcpu *vcpu)<br>
                }<br>
        }<br>
<br>
+       write_lock(&vcpu->kvm->mmu_lock);<br>
+<br>
+       r = make_mmu_pages_available(vcpu);<br>
+       if (r)<br>
+               goto out_unlock;<br>
+<br>
        /*<br>
         * Do we shadow a long mode page table? If so we need to<br>
         * write-protect the guests page table root.<br>
@@ -3311,8 +3332,10 @@ static int mmu_alloc_shadow_roots(struct kvm_vcpu *vcpu)<br>
                goto set_root_pgd;<br>
        }<br>
<br>
-       if (WARN_ON_ONCE(!mmu->pae_root))<br>
-               return -EIO;<br>
+       if (WARN_ON_ONCE(!mmu->pae_root)) {<br>
+               r = -EIO;<br>
+               goto out_unlock;<br>
+       }<br>
<br>
        /*<br>
         * We shadow a 32 bit page table. This may be a legacy 2-level<br>
@@ -3323,8 +3346,10 @@ static int mmu_alloc_shadow_roots(struct kvm_vcpu *vcpu)<br>
        if (mmu->shadow_root_level == PT64_ROOT_4LEVEL) {<br>
                pm_mask |= PT_ACCESSED_MASK | PT_WRITABLE_MASK | PT_USER_MASK;<br>
<br>
-               if (WARN_ON_ONCE(!mmu->lm_root))<br>
-                       return -EIO;<br>
+               if (WARN_ON_ONCE(!mmu->lm_root)) {<br>
+                       r = -EIO;<br>
+                       goto out_unlock;<br>
+               }<br>
<br>
                mmu->lm_root[0] = __pa(mmu->pae_root) | pm_mask;<br>
        }<br>
@@ -3352,8 +3377,9 @@ static int mmu_alloc_shadow_roots(struct kvm_vcpu *vcpu)<br>
<br>
 set_root_pgd:<br>
        mmu->root_pgd = root_pgd;<br>
-<br>
-       return 0;<br>
+out_unlock:<br>
+       write_unlock(&vcpu->kvm->mmu_lock);<br>
+       return r;<br>
 }<br>
<br>
 static int mmu_alloc_special_roots(struct kvm_vcpu *vcpu)<br>
@@ -4852,14 +4878,10 @@ int kvm_mmu_load(struct kvm_vcpu *vcpu)<br>
        r = mmu_alloc_special_roots(vcpu);<br>
        if (r)<br>
                goto out;<br>
-       write_lock(&vcpu->kvm->mmu_lock);<br>
-       if (make_mmu_pages_available(vcpu))<br>
-               r = -ENOSPC;<br>
-       else if (vcpu->arch.mmu->direct_map)<br>
+       if (vcpu->arch.mmu->direct_map)<br>
                r = mmu_alloc_direct_roots(vcpu);<br>
        else<br>
                r = mmu_alloc_shadow_roots(vcpu);<br>
-       write_unlock(&vcpu->kvm->mmu_lock);<br>
        if (r)<br>
                goto out;<br>
<br>
<br>
<br>


Hi,<br>
<br>
On 4/7/21 9:43 PM, Thomas Weißschuh wrote:<br>
><i> Hi Hans,</i><br>
><i> </i><br>
><i> On Mi, 2021-04-07T17:54+0200, Hans de Goede wrote:</i><br>
><i>> Thank you for your new driver and thank you for the quick respin</i><br>
><i>> addressing Barnabás' request to make it a WMI driver.</i><br>
><i>></i><br>
><i>> The code looks good, so merging this should be a no-brainer,</i><br>
><i>> yet I'm not sure if I should merge this driver as-is, let me</i><br>
><i>> explain.</i><br>
><i> </i><br>
><i> thanks for the encouraging words.</i><br>
><i> </i><br>
><i>> The problem is that I assume that this is based on reverse-engineering?</i><br>
><i> </i><br>
><i> Yes, it is completely reverse-engineered.</i><br>
><i> Essentially I stumbled upon Matthews comment at</i><br>
><i> <a  rel="nofollow" href="https://bugzilla.kernel.org/show_bug.cgi?id=204807#c37">https://bugzilla.kernel.org/show_bug.cgi?id=204807#c37</a> and went from there.</i><br>
><i> </i><br>
><i>> We have some mixes experiences with reverse-engineered WMI drivers,</i><br>
><i>> sometimes a feature is not supported yet the wmi_evaluate_method()</i><br>
><i>> call happily succeeds. One example of this causing trouble is:</i><br>
><i>></i><br>
><i>> <a  rel="nofollow" href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1797d588af15174d4a4e7159dac8c800538e4f8c">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1797d588af15174d4a4e7159dac8c800538e4f8c</a></i><br>
><i> </i><br>
><i> There actually are reports of recent, similar mainboards with recent firmware and</i><br>
><i> similar sensor chips that do not support the temperature query.</i><br>
><i> (<a  rel="nofollow" href="https://github.com/t-8ch/linux-gigabyte-wmi-driver/issues/3">https://github.com/t-8ch/linux-gigabyte-wmi-driver/issues/3</a> and</i><br>
><i> <a  rel="nofollow" href="https://github.com/t-8ch/linux-gigabyte-wmi-driver/issues/2">https://github.com/t-8ch/linux-gigabyte-wmi-driver/issues/2</a>)</i><br>
><i> </i><br>
><i> Unfortunately for unknown WMI queries the firmware does not return any value.</i><br>
><i> This ends up as an ACPI integer with value 0 on the driver side.</i><br>
><i> (Which I could not yet find documentation for if that is expected)</i><br>
><i> In the current version of the driver EIO is returned for 0 values which</i><br>
><i> get translated to N/A by lm-sensors.</i><br>
><i> </i><br>
><i>> At a minimum I think your driver should check in its</i><br>
><i>> probe function that</i><br>
><i>></i><br>
><i>> gigabyte_wmi_query_integer(GIGABYTE_WMI_TEMPERATURE_QUERY, ...)</i><br>
><i>></i><br>
><i>> actually succeeds on the machine the driver is running on chances</i><br>
><i>> are that Gigabyte has been using the DEADBEEF-2001-0000-00A0-C90629100000</i><br>
><i>> GUID for ages, where as the 0x125 value for GIGABYTE_WMI_TEMPERATURE_QUERY</i><br>
><i>> suggests that this is a pretty new API.</i><br>
><i> </i><br>
><i> Would it be enough to probe all six sensors and check if all return 0?</i><br>
<br>
I think that failing the probe with -ENODEV, with a dev_info() explaining why when<br>
all six sensors return 0 would be good yes, that should also fix those 2<br>
issues on <a  rel="nofollow" href="https://github.com/t-8ch/linux-gigabyte-wmi-driver/">https://github.com/t-8ch/linux-gigabyte-wmi-driver/</a>.<br>
<br>
><i>> It would be good if you can see if you can find some DSDT-s for older</i><br>
><i>> gigabyte motherboards attached to various distro's bug-tracking systems</i><br>
><i>> or forum posts and see how those respond to an unknown gigabyte_wmi_commandtype.</i><br>
><i> </i><br>
><i> Will do.</i><br>
<br>
Since you alreayd have bugreports of boards where this does not work,<br>
please don't spend too much time on this. I guess those older DSDT-s will<br>
also just return an integer with value 0.<br>
<br>
><i>> Another open question to make sure this driver is suitable</i><br>
><i>> as a generic driver (and does not misbehave) is how to figure out</i><br>
><i>> how many temperature sensors there actually are.</i><br>
><i> </i><br>
><i> So far I could not find out how to query this from the firmware.</i><br>
><i> The IT8688 chip can report the state of each sensor but that is not exposed by</i><br>
><i> the firmware.</i><br>
><i> But even the state information from the IT8688 is not accurate as is.</i><br>
><i> One of the sensors that is reported as being active (directly via it87) on my</i><br>
><i> machine always reports -55°C (yes, negative).</i><br>
<br>
Ok.<br>
<br>
><i>> Perhaps the WMI interface returns an error when you query an out-of-range</i><br>
><i>> temperature channel?</i><br>
><i> </i><br>
><i> Also "0" as mentioned above.</i><br>
<br>
Hmm, so maybe this can be used to limit the amount of reported temperature<br>
sensors, IOW if sensors 5 and 6 report 0, only register 4 sensors ?<br>
<br>
><i> </i><br>
><i>> One option here might be to add a DMI matching table and only load on</i><br>
><i>> systems on that table for now. That table could then perhaps also provide</i><br>
><i>> labels for each of the temperature channels, which is something which</i><br>
><i>> would be nice to have regardless of my worries about how well this driver</i><br>
><i>> will work on motherboards on which it has not been tested.</i><br>
><i> </i><br>
><i> I am collecting reports for working motherboards at</i><br>
><i> <a  rel="nofollow" href="https://github.com/t-8ch/linux-gigabyte-wmi-driver/issues/1">https://github.com/t-8ch/linux-gigabyte-wmi-driver/issues/1</a> .</i><br>
<br>
Good, you should probably ask reporters there to provide the output of:<br>
<br>
grep . /sys/class/dmi/id/* 2> /dev/null<br>
<br>
Ran as a normal user (so that the serial-numbers will be skipped) so that<br>
you will have DMI strings to match on if you decide to go that route.<br>
<br>
><i> </i><br>
><i>> You could combine this DMI matching table with a "force" module option to</i><br>
><i>> continue with probing on boards which are not on the table to allow users</i><br>
><i>> to test and report their results to you.</i><br>
><i>></i><br>
><i>> And hopefully after a while, when we're confident that the code works</i><br>
><i>> well on most gigabyte boards we can drop the DMI table, or at least</i><br>
><i>> only use it for the channel labels.</i><br>
><i> </i><br>
><i> That sounds good.</i><br>
><i> </i><br>
><i>> Please don't take this the wrong way; I think it is great that you are</i><br>
><i>> working on this. And the quick turnaround of the v2 of this drivers makes</i><br>
><i>> me pretty certain that we can figure something out and get this merged.</i><br>
><i> </i><br>
><i> Thank you for the feedback!</i><br>
><i> </i><br>
><i>> Have you tried contacting Gigabyte about this? I don't think the WMI</i><br>
><i>> interface is something which they need to keep secret for competitive</i><br>
><i>> reasons, so maybe they can help? Note if they want you to sign a NDA</i><br>
><i>> of sorts to view docs, then make sure that it contains some language</i><br>
><i>> about them allowing you to release an opensource driver for their</i><br>
><i>> hardware based on the "protected" information.</i><br>
><i> </i><br>
><i> I have not contacted them yet, will do.</i><br>
><i> </i><br>
><i> As mentioned in the initial patch submission there would be different ways to</i><br>
><i> access this information firmware:</i><br>
><i> </i><br>
><i> * Directly call the underlying ACPI methods (these are present in all so far</i><br>
><i>   observed firmwares, even if not exposed via WMI).</i><br>
><i> * Directly access the ACPI IndexField representing the it87 chip.</i><br>
><i> * Directly access the it87 registers while holding the relevant locks via ACPI.</i><br>
><i> </i><br>
><i> I assume all of those mechanisms have no place in a proper kernel driver but</i><br>
><i> would like to get your opinion on it.</i><br>
<br>
Actually the "Directly access the it87 registers" option is potentially interesting<br>
since it will allow using the it87 driver which gives a lot more features.<br>
<br>
I actually wrote a rough outline of how something like this could work here:<br>
<br>
<a  rel="nofollow" href="https://bugzilla.kernel.org/show_bug.cgi?id=204807#c47">https://bugzilla.kernel.org/show_bug.cgi?id=204807#c47</a><br>
<br>
Note I'm not sure if that is the right approach, but it definitely is an<br>
option. It seems that this one might also solve the X470-AORUS-ULTRA-GAMING<br>
case (<a  rel="nofollow" href="https://github.com/t-8ch/linux-gigabyte-wmi-driver/issues/2">https://github.com/t-8ch/linux-gigabyte-wmi-driver/issues/2</a>)<br>
<br>
Hopefully the direct-register ACPI/WMI access methods will also allow<br>
reading the super-io vendor and product ids so that we can be reasonably<br>
sure that we are not loading the wrong driver on a board.<br>
<br>
OTOH the WMI-temp method approach may also work on boards where the sensors<br>
(or some of the sensors) are not supported.<br>
<br>
I'm afraid there is no obviously correct answer here. If you feel like it<br>
experimenting with the "Directly access the it87 registers" option would certainly<br>
be interesting IMHO.<br>
<br>
It might be good to get hwmon subsystems maintainer's opinion on this<br>
before sinking a lot of time into this though (added to the Cc).<br>
<br>
Jean, Guenter,<br>
<br>
Thomas has been working on a WMI driver to expose various motherboard<br>
temperatures on a gigabyte board where the IO-addresses for the it87 chip<br>
are reserved by ACPI. We are discussing how best to deal with this, there<br>
are some ACPI methods to directly access the super-IO registers (with locking<br>
to protect against other ACPI accesses). This reminded me of an idea I had<br>
a while ago to solve a similar issue with an other superIO chip, abstract<br>
the superIO register access-es using some reg_ops struct and allow an ACPI/WMI<br>
driver to provide alternative reg_ops:<br>
<a  rel="nofollow" href="https://bugzilla.kernel.org/show_bug.cgi?id=204807#c47">https://bugzilla.kernel.org/show_bug.cgi?id=204807#c47</a><br>
<br>
Do you think this is a good idea (or a bad one)? And would something like that<br>
be acceptable to you ?<br>
<br>
Regards,<br>
<br>
Hans<br>
<br>
<br>


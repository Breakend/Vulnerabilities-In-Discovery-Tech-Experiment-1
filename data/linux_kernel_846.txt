For device mode Partial Power Down entering and exiting<br>
separate functions are needed to implement the logic.<br>
Earlier the logic was implemented in one function. Which was<br>
confusing the readability. Also both host and device implementations<br>
were in the same function.<br>
<br>
- Added device partial power down functions which must be called<br>
by dwc2_enter_partial_power_down()/dwc2_exit_partial_power_down()<br>
functions.<br>
<br>
- Added "in_ppd" flag in "dwc2_hsotg" struct to indicate the<br>
core state after entering into partial power down mode.<br>
<br>
Added function names:<br>
dwc2_gadget_enter_partial_power_down()<br>
dwc2_gadget_exit_partial_power_down()<br>
<br>
NOTE: There is a checkpatch "CHECK" warning on "udelay(100)".<br>
The delay is needed to properly exit gadget Partial Power Down<br>
A delay less than 100 doesn't work.<br>
<br>
Signed-off-by: Artur Petrosyan <Arthur.Petrosyan@xxxxxxxxxxxx><br>
Acked-by: Minas Harutyunyan <Minas.Harutyunyan@xxxxxxxxxxxx><br>
---<br>
 drivers/usb/dwc2/core.h   |  10 +++<br>
 drivers/usb/dwc2/gadget.c | 128 ++++++++++++++++++++++++++++++++++++++<br>
 2 files changed, 138 insertions(+)<br>
<br>
diff --git a/drivers/usb/dwc2/core.h b/drivers/usb/dwc2/core.h<br>
index d0ebe721fb98..ed54d834138d 100644<br>
--- a/drivers/usb/dwc2/core.h<br>
+++ b/drivers/usb/dwc2/core.h<br>
@@ -865,6 +865,7 @@ struct dwc2_hregs_backup {<br>
  * @gadget_enabled:	Peripheral mode sub-driver initialization indicator.<br>
  * @ll_hw_enabled:	Status of low-level hardware resources.<br>
  * @hibernated:		True if core is hibernated<br>
+ * @in_ppd:		True if core is partial power down mode.<br>
  * @reset_phy_on_wake:	Quirk saying that we should assert PHY reset on a<br>
  *			remote wakeup.<br>
  * @phy_off_for_suspend: Status of whether we turned the PHY off at suspend.<br>
@@ -1060,6 +1061,7 @@ struct dwc2_hsotg {<br>
 	unsigned int gadget_enabled:1;<br>
 	unsigned int ll_hw_enabled:1;<br>
 	unsigned int hibernated:1;<br>
+	unsigned int in_ppd:1;<br>
 	unsigned int reset_phy_on_wake:1;<br>
 	unsigned int need_phy_for_wake:1;<br>
 	unsigned int phy_off_for_suspend:1;<br>
@@ -1409,6 +1411,9 @@ int dwc2_restore_device_registers(struct dwc2_hsotg *hsotg, int remote_wakeup);<br>
 int dwc2_gadget_enter_hibernation(struct dwc2_hsotg *hsotg);<br>
 int dwc2_gadget_exit_hibernation(struct dwc2_hsotg *hsotg,<br>
 				 int rem_wakeup, int reset);<br>
+int dwc2_gadget_enter_partial_power_down(struct dwc2_hsotg *hsotg);<br>
+int dwc2_gadget_exit_partial_power_down(struct dwc2_hsotg *hsotg,<br>
+					bool restore);<br>
 int dwc2_hsotg_tx_fifo_count(struct dwc2_hsotg *hsotg);<br>
 int dwc2_hsotg_tx_fifo_total_depth(struct dwc2_hsotg *hsotg);<br>
 int dwc2_hsotg_tx_fifo_average_depth(struct dwc2_hsotg *hsotg);<br>
@@ -1442,6 +1447,11 @@ static inline int dwc2_gadget_enter_hibernation(struct dwc2_hsotg *hsotg)<br>
 static inline int dwc2_gadget_exit_hibernation(struct dwc2_hsotg *hsotg,<br>
 					       int rem_wakeup, int reset)<br>
 { return 0; }<br>
+static inline int dwc2_gadget_enter_partial_power_down(struct dwc2_hsotg *hsotg)<br>
+{ return 0; }<br>
+static inline int dwc2_gadget_exit_partial_power_down(struct dwc2_hsotg *hsotg,<br>
+						      bool restore)<br>
+{ return 0; }<br>
 static inline int dwc2_hsotg_tx_fifo_count(struct dwc2_hsotg *hsotg)<br>
 { return 0; }<br>
 static inline int dwc2_hsotg_tx_fifo_total_depth(struct dwc2_hsotg *hsotg)<br>
diff --git a/drivers/usb/dwc2/gadget.c b/drivers/usb/dwc2/gadget.c<br>
index ad4c94366dad..98a2a63c67ae 100644<br>
--- a/drivers/usb/dwc2/gadget.c<br>
+++ b/drivers/usb/dwc2/gadget.c<br>
@@ -5351,3 +5351,131 @@ int dwc2_gadget_exit_hibernation(struct dwc2_hsotg *hsotg,<br>
 <br>
 	return ret;<br>
 }<br>
+<br>
+/**<br>
+ * dwc2_gadget_enter_partial_power_down() - Put controller in partial<br>
+ * power down.<br>
+ *<br>
+ * @hsotg: Programming view of the DWC_otg controller<br>
+ *<br>
+ * Return: non-zero if failed to enter device partial power down.<br>
+ *<br>
+ * This function is for entering device mode partial power down.<br>
+ */<br>
+int dwc2_gadget_enter_partial_power_down(struct dwc2_hsotg *hsotg)<br>
+{<br>
+	u32 pcgcctl;<br>
+	int ret = 0;<br>
+<br>
+	dev_dbg(hsotg->dev, "Entering device partial power down started.\n");<br>
+<br>
+	/* Backup all registers */<br>
+	ret = dwc2_backup_global_registers(hsotg);<br>
+	if (ret) {<br>
+		dev_err(hsotg->dev, "%s: failed to backup global registers\n",<br>
+			__func__);<br>
+		return ret;<br>
+	}<br>
+<br>
+	ret = dwc2_backup_device_registers(hsotg);<br>
+	if (ret) {<br>
+		dev_err(hsotg->dev, "%s: failed to backup device registers\n",<br>
+			__func__);<br>
+		return ret;<br>
+	}<br>
+<br>
+	/*<br>
+	 * Clear any pending interrupts since dwc2 will not be able to<br>
+	 * clear them after entering partial_power_down.<br>
+	 */<br>
+	dwc2_writel(hsotg, 0xffffffff, GINTSTS);<br>
+<br>
+	/* Put the controller in low power state */<br>
+	pcgcctl = dwc2_readl(hsotg, PCGCTL);<br>
+<br>
+	pcgcctl |= PCGCTL_PWRCLMP;<br>
+	dwc2_writel(hsotg, pcgcctl, PCGCTL);<br>
+	udelay(5);<br>
+<br>
+	pcgcctl |= PCGCTL_RSTPDWNMODULE;<br>
+	dwc2_writel(hsotg, pcgcctl, PCGCTL);<br>
+	udelay(5);<br>
+<br>
+	pcgcctl |= PCGCTL_STOPPCLK;<br>
+	dwc2_writel(hsotg, pcgcctl, PCGCTL);<br>
+<br>
+	/* Set in_ppd flag to 1 as here core enters suspend. */<br>
+	hsotg->in_ppd = 1;<br>
+	hsotg->lx_state = DWC2_L2;<br>
+<br>
+	dev_dbg(hsotg->dev, "Entering device partial power down completed.\n");<br>
+<br>
+	return ret;<br>
+}<br>
+<br>
+/*<br>
+ * dwc2_gadget_exit_partial_power_down() - Exit controller from device partial<br>
+ * power down.<br>
+ *<br>
+ * @hsotg: Programming view of the DWC_otg controller<br>
+ * @restore: indicates whether need to restore the registers or not.<br>
+ *<br>
+ * Return: non-zero if failed to exit device partial power down.<br>
+ *<br>
+ * This function is for exiting from device mode partial power down.<br>
+ */<br>
+int dwc2_gadget_exit_partial_power_down(struct dwc2_hsotg *hsotg,<br>
+					bool restore)<br>
+{<br>
+	u32 pcgcctl;<br>
+	u32 dctl;<br>
+	struct dwc2_dregs_backup *dr;<br>
+	int ret = 0;<br>
+<br>
+	dr = &hsotg->dr_backup;<br>
+<br>
+	dev_dbg(hsotg->dev, "Exiting device partial Power Down started.\n");<br>
+<br>
+	pcgcctl = dwc2_readl(hsotg, PCGCTL);<br>
+	pcgcctl &= ~PCGCTL_STOPPCLK;<br>
+	dwc2_writel(hsotg, pcgcctl, PCGCTL);<br>
+<br>
+	pcgcctl = dwc2_readl(hsotg, PCGCTL);<br>
+	pcgcctl &= ~PCGCTL_PWRCLMP;<br>
+	dwc2_writel(hsotg, pcgcctl, PCGCTL);<br>
+<br>
+	pcgcctl = dwc2_readl(hsotg, PCGCTL);<br>
+	pcgcctl &= ~PCGCTL_RSTPDWNMODULE;<br>
+	dwc2_writel(hsotg, pcgcctl, PCGCTL);<br>
+<br>
+	udelay(100);<br>
+	if (restore) {<br>
+		ret = dwc2_restore_global_registers(hsotg);<br>
+		if (ret) {<br>
+			dev_err(hsotg->dev, "%s: failed to restore registers\n",<br>
+				__func__);<br>
+			return ret;<br>
+		}<br>
+		/* Restore DCFG */<br>
+		dwc2_writel(hsotg, dr->dcfg, DCFG);<br>
+<br>
+		ret = dwc2_restore_device_registers(hsotg, 0);<br>
+		if (ret) {<br>
+			dev_err(hsotg->dev, "%s: failed to restore device registers\n",<br>
+				__func__);<br>
+			return ret;<br>
+		}<br>
+	}<br>
+<br>
+	/* Set the Power-On Programming done bit */<br>
+	dctl = dwc2_readl(hsotg, DCTL);<br>
+	dctl |= DCTL_PWRONPRGDONE;<br>
+	dwc2_writel(hsotg, dctl, DCTL);<br>
+<br>
+	/* Set in_ppd flag to 0 as here core exits from suspend. */<br>
+	hsotg->in_ppd = 0;<br>
+	hsotg->lx_state = DWC2_L0;<br>
+<br>
+	dev_dbg(hsotg->dev, "Exiting device partial Power Down completed.\n");<br>
+	return ret;<br>
+}<br>
-- <br>
2.25.1<br>
<br>
<br>

